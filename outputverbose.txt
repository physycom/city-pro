PyMC3 not installed
Args:  Namespace(config_file='/home/aamad/codice/city-pro/config')
Base directory:  /home/aamad/codice/city-pro/config
Config File:
 /home/aamad/codice/city-pro/config/ConfigPythonAnalysis.json
Dates to Analyze:
 ['2022-12-30', '2022-12-31', '2023-01-01', '2022-05-12', '2022-11-11', '2022-07-01', '2022-08-05', '2022-01-31', '2023-03-18']
Number of CPU:  9
Initialiaze Mobility and Network for Date: 2022-05-12
Warning: Not Initialized Class2MFD
Reading fcm_centers
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-05-12_2022-05-12_fcm_centers.csv
Reading fcm
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-05-12_2022-05-12_fcm.csv
Reading fcm_new
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-05-12_2022-05-12_fcm_new.csv
1st join Fcm:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Date:  2022-05-12
renamed:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Reading stats
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-05-12_2022-05-12_stats.csv
No stats
FluxesSubFile not found
Get increasingly included subnets
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-05-12_2022-05-120_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-05-12_2022-05-121_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-05-12_2022-05-122_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-05-12_2022-05-123_class_subnet.txt
Reading GeoJson
Reading fluxes_sub
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/weights/bologna_mdt_2022-05-12_2022-05-12.fluxes.sub
FluxesSubFile not found
Computing MFD Variables from Fcm
dict_keys([0, 1, 2, 3])
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Comparison of trajectories from Old to New Class 2022-05-12
Reading timed_fluxes
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-05-12_2022-05-12_timed_fluxes.csv
No Subnetworks to Plot
VelTimePercorrenceFile not found
Computing MFD Plot
Get MFD For Plot: None
MFD Features Aggregated: 
Get Lower Bounds From Bins: population
Get Lower Bounds From Bins: speed_kmh

Interval Error:  48.54557725406356
After GetMFDForPlot:

Plotting MFD:

Loading Class2MFD2Plot and Class2MFDNew2Plot
Reading fluxes
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/weights/bologna_mdt_2022-05-12_2022-05-12.fluxes
all different groups colored differently
Initialize The Fitting Parameters Initial Guess And Windows
2022-05-12
Class2InitialGuess:
 {0: {'maxwellian': {'av_speed': {'initial_guess': [0, 0], 'interval': []}, 'speed_kmh': {'initial_guess': [0, 0], 'interval': []}}, 'gaussian': {'av_speed': {'initial_guess': [0, 0], 'interval': []}, 'speed_kmh': {'initial_guess': [0, 0], 'interval': []}}, 'powerlaw': {'lenght': {'initial_guess': [0, 0], 'interval': []}, 'lenght_km': {'initial_guess': [0, 0], 'interval': []}, 'time_hours': {'initial_guess': [0, 0], 'interval': []}, 'time': {'initial_guess': [0, 0], 'interval': []}}, 'exponential': {'lenght': {'initial_guess': [0, 0], 'interval': []}, 'lenght_km': {'initial_guess': [0, 0], 'interval': []}, 'time_hours': {'initial_guess': [0, 0], 'interval': []}, 'time': {'initial_guess': [0, 0], 'interval': []}}}, 1: {'maxwellian': {'av_speed': {'initial_guess': [0, 0], 'interval': []}, 'speed_kmh': {'initial_guess': [0, 0], 'interval': []}}, 'gaussian': {'av_speed': {'initial_guess': [0, 0], 'interval': []}, 'speed_kmh': {'initial_guess': [0, 0], 'interval': []}}, 'powerlaw': {'lenght': {'initial_guess': [0, 0], 'interval': []}, 'lenght_km': {'initial_guess': [0, 0], 'interval': []}, 'time_hours': {'initial_guess': [0, 0], 'interval': []}, 'time': {'initial_guess': [0, 0], 'interval': []}}, 'exponential': {'lenght': {'initial_guess': [0, 0], 'interval': []}, 'lenght_km': {'initial_guess': [0, 0], 'interval': []}, 'time_hours': {'initial_guess': [0, 0], 'interval': []}, 'time': {'initial_guess': [0, 0], 'interval': []}}}, 2: {'maxwellian': {'av_speed': {'initial_guess': [0, 0], 'interval': []}, 'speed_kmh': {'initial_guess': [0, 0], 'interval': []}}, 'gaussian': {'av_speed': {'initial_guess': [0, 0], 'interval': []}, 'speed_kmh': {'initial_guess': [0, 0], 'interval': []}}, 'powerlaw': {'lenght': {'initial_guess': [0, 0], 'interval': []}, 'lenght_km': {'initial_guess': [0, 0], 'interval': []}, 'time_hours': {'initial_guess': [0, 0], 'interval': []}, 'time': {'initial_guess': [0, 0], 'interval': []}}, 'exponential': {'lenght': {'initial_guess': [0, 0], 'interval': []}, 'lenght_km': {'initial_guess': [0, 0], 'interval': []}, 'time_hours': {'initial_guess': [0, 0], 'interval': []}, 'time': {'initial_guess': [0, 0], 'interval': []}}}, 3: {'maxwellian': {'av_speed': {'initial_guess': [0, 0], 'interval': []}, 'speed_kmh': {'initial_guess': [0, 0], 'interval': []}}, 'gaussian': {'av_speed': {'initial_guess': [0, 0], 'interval': []}, 'speed_kmh': {'initial_guess': [0, 0], 'interval': []}}, 'powerlaw': {'lenght': {'initial_guess': [0, 0], 'interval': []}, 'lenght_km': {'initial_guess': [0, 0], 'interval': []}, 'time_hours': {'initial_guess': [0, 0], 'interval': []}, 'time': {'initial_guess': [0, 0], 'interval': []}}, 'exponential': {'lenght': {'initial_guess': [0, 0], 'interval': []}, 'lenght_km': {'initial_guess': [0, 0], 'interval': []}, 'time_hours': {'initial_guess': [0, 0], 'interval': []}, 'time': {'initial_guess': [0, 0], 'interval': []}}}}
2022-05-12
Feature:  av_speed
IntClass:  0
Function2Test:  maxwellian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [0, 0], 'interval': []}
2022-05-12
Feature:  speed_kmh
IntClass:  0
Function2Test:  maxwellian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [0, 0], 'interval': []}
2022-05-12
Feature:  av_speed
IntClass:  0
Function2Test:  gaussian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [0, 0], 'interval': []}
2022-05-12
Feature:  speed_kmh
IntClass:  0
Function2Test:  gaussian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [0, 0], 'interval': []}
2022-05-12
Feature:  lenght
IntClass:  0
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [0, 0], 'interval': []}
2022-05-12
Feature:  lenght_km
IntClass:  0
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [0, 0], 'interval': []}
2022-05-12
Feature:  time_hours
IntClass:  0
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [0, 0], 'interval': []}
2022-05-12
Feature:  time
IntClass:  0
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [0, 0], 'interval': []}
2022-05-12
Feature:  lenght
IntClass:  0
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [0, 0], 'interval': []}
2022-05-12
Feature:  lenght_km
IntClass:  0
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [0, 0], 'interval': []}
2022-05-12
Feature:  time_hours
IntClass:  0
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [0, 0], 'interval': []}
2022-05-12
Feature:  time
IntClass:  0
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [0, 0], 'interval': []}
2022-05-12
Feature:  av_speed
IntClass:  1
Function2Test:  maxwellian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [2.211046374415076, 1.8654836214033406], 'interval': []}
2022-05-12
Feature:  speed_kmh
IntClass:  1
Function2Test:  maxwellian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [7.959766947894274, 6.715741037052027], 'interval': []}
2022-05-12
Feature:  av_speed
IntClass:  1
Function2Test:  gaussian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [2.211046374415076, 1.8654836214033406], 'interval': []}
2022-05-12
Feature:  speed_kmh
IntClass:  1
Function2Test:  gaussian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [7.959766947894274, 6.715741037052027], 'interval': []}
2022-05-12
Feature:  lenght
IntClass:  1
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [3692000, -1], 'interval': [500, 4500]}
2022-05-12
Feature:  lenght_km
IntClass:  1
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [3692.0, -1], 'interval': [0.5, 4.5]}
2022-05-12
Feature:  time_hours
IntClass:  1
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [417.08333333333337, -1], 'interval': [0.1388888888888889, 2.7777777777777777]}
2022-05-12
Feature:  time
IntClass:  1
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [1501500, -1], 'interval': [500, 10000]}
2022-05-12
Feature:  lenght
IntClass:  1
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [7384, 1100], 'interval': [500, 4500]}
2022-05-12
Feature:  lenght_km
IntClass:  1
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [7384, 1.1], 'interval': [0.5, 4.5]}
2022-05-12
Feature:  time_hours
IntClass:  1
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [3003, 0.6055555555555555], 'interval': [0.1388888888888889, 2.7777777777777777]}
2022-05-12
Feature:  time
IntClass:  1
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [3003, 2180], 'interval': [500, 10000]}
2022-05-12
Feature:  av_speed
IntClass:  2
Function2Test:  maxwellian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [7.136487982298558, 1.886546656998432], 'interval': []}
2022-05-12
Feature:  speed_kmh
IntClass:  2
Function2Test:  maxwellian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [25.691356736274813, 6.791567965194356], 'interval': []}
2022-05-12
Feature:  av_speed
IntClass:  2
Function2Test:  gaussian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [7.136487982298558, 1.886546656998432], 'interval': []}
2022-05-12
Feature:  speed_kmh
IntClass:  2
Function2Test:  gaussian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [25.691356736274813, 6.791567965194356], 'interval': []}
2022-05-12
Feature:  lenght
IntClass:  2
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [1100000, -1], 'interval': [500, 10000]}
2022-05-12
Feature:  lenght_km
IntClass:  2
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [1100.0, -1], 'interval': [0.5, 10.0]}
2022-05-12
Feature:  time_hours
IntClass:  2
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [949.4444444444445, -1], 'interval': [0.1388888888888889, 2.2222222222222223]}
2022-05-12
Feature:  time
IntClass:  2
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [3418000, -1], 'interval': [500, 8000]}
2022-05-12
Feature:  lenght
IntClass:  2
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [2200, 3900], 'interval': [500, 10000]}
2022-05-12
Feature:  lenght_km
IntClass:  2
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [2200, 3.9], 'interval': [0.5, 10.0]}
2022-05-12
Feature:  time_hours
IntClass:  2
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [6836, 0.30833333333333335], 'interval': [0.1388888888888889, 2.2222222222222223]}
2022-05-12
Feature:  time
IntClass:  2
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [6836, 1110], 'interval': [500, 8000]}
2022-05-12
Feature:  av_speed
IntClass:  3
Function2Test:  maxwellian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [14.248284265690744, 3.6701242203575384], 'interval': []}
2022-05-12
Feature:  speed_kmh
IntClass:  3
Function2Test:  maxwellian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [51.29382335648667, 13.21244719328714], 'interval': []}
2022-05-12
Feature:  av_speed
IntClass:  3
Function2Test:  gaussian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [14.248284265690744, 3.6701242203575384], 'interval': []}
2022-05-12
Feature:  speed_kmh
IntClass:  3
Function2Test:  gaussian
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [51.29382335648667, 13.21244719328714], 'interval': []}
2022-05-12
Feature:  lenght
IntClass:  3
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [2750000, -1], 'interval': [500, 6000]}
2022-05-12
Feature:  lenght_km
IntClass:  3
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [2750.0, -1], 'interval': [0.5, 6.0]}
2022-05-12
Feature:  time_hours
IntClass:  3
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [1069.4444444444446, -1], 'interval': [0.1388888888888889, 1.6666666666666667]}
2022-05-12
Feature:  time
IntClass:  3
Function2Test:  powerlaw
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [3850000, -1], 'interval': [500, 6000]}
2022-05-12
Feature:  lenght
IntClass:  3
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [5500, 11000], 'interval': [500, 6000]}
2022-05-12
Feature:  lenght_km
IntClass:  3
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [5500, 11.0], 'interval': [0.5, 6.0]}
2022-05-12
Feature:  time_hours
IntClass:  3
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [7700, 0.4166666666666667], 'interval': [0.1388888888888889, 1.6666666666666667]}
2022-05-12
Feature:  time
IntClass:  3
Function2Test:  exponential
self.Class2InitialGuess[IntClass][Function2Test][Feature]:
 {'initial_guess': [7700, 1500], 'interval': [500, 6000]}
Return Fit Info From Dict:
Fit and Plot:
Fitting Function maxwellian
Feature av_speed
Fitting maxwellian
(array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]]))
maxwellian fit:  6000.0   0.3
Convergence fit maxwellian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2697.809851930523}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': None, 'StdError': None}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function gaussian
Feature av_speed
Fitting gaussian
(array([4.90701515e-05, 1.73029063e+00]), array([[inf, inf],
       [inf, inf]]))
gaussian fit:  4.9070151459549495e-05   1.7302906325644332
Convergence fit gaussian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2697.809851930523}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([4.90701515e-05, 1.73029063e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2445.114230460409}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function powerlaw
Feature av_speed
Fitting Function exponential
Feature av_speed
Fit and Plot:
Fitting Function maxwellian
Feature lenght
Fitting Function gaussian
Feature lenght
Fitting Function powerlaw
Feature lenght
Fitting powerlaw
(array([ 7.16137927e+09, -1.48784016e+00]), array([[ 7.65360779e+17, -1.29562441e+07],
       [-1.29562441e+07,  2.19908032e-04]]))
powerlaw fit:  7161379272.995273   -1.4878401613898875
Convergence fit powerlaw:  False
Optimal parameters:  [ 7.08668108e+03 -7.25992595e-01]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2697.809851930523}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([4.90701515e-05, 1.73029063e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2445.114230460409}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 7.16137927e+09, -1.48784016e+00]), array([[ 7.65360779e+17, -1.29562441e+07],
       [-1.29562441e+07,  2.19908032e-04]])), 'StdError': 306.74609692831075}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function exponential
Feature lenght
Fitting exponential
(array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]]))
exponential fit:  6000.0   0.3
Convergence fit exponential:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2697.809851930523}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([4.90701515e-05, 1.73029063e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2445.114230460409}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 7.16137927e+09, -1.48784016e+00]), array([[ 7.65360779e+17, -1.29562441e+07],
       [-1.29562441e+07,  2.19908032e-04]])), 'StdError': 306.74609692831075}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 7057.518086409697}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fit and Plot:
Fitting Function maxwellian
Feature time
Fitting Function gaussian
Feature time
Fitting Function powerlaw
Feature time
Fitting powerlaw
(array([ 1.51706136e+11, -1.98845440e+00]), array([[ 6.72131410e+20, -5.94385282e+08],
       [-5.94385282e+08,  5.26178935e-04]]))
powerlaw fit:  151706136352.2245   -1.9884544027773194
Convergence fit powerlaw:  False
Optimal parameters:  [ 7.98168161e+03 -7.40869891e-01]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2697.809851930523}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([4.90701515e-05, 1.73029063e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2445.114230460409}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 7.16137927e+09, -1.48784016e+00]), array([[ 7.65360779e+17, -1.29562441e+07],
       [-1.29562441e+07,  2.19908032e-04]])), 'StdError': 306.74609692831075}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.51706136e+11, -1.98845440e+00]), array([[ 6.72131410e+20, -5.94385282e+08],
       [-5.94385282e+08,  5.26178935e-04]])), 'StdError': 360.8979500967351}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 7057.518086409697}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function exponential
Feature time
Fitting exponential
(array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]]))
exponential fit:  6000.0   0.3
Convergence fit exponential:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2697.809851930523}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([4.90701515e-05, 1.73029063e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2445.114230460409}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 7.16137927e+09, -1.48784016e+00]), array([[ 7.65360779e+17, -1.29562441e+07],
       [-1.29562441e+07,  2.19908032e-04]])), 'StdError': 306.74609692831075}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.51706136e+11, -1.98845440e+00]), array([[ 6.72131410e+20, -5.94385282e+08],
       [-5.94385282e+08,  5.26178935e-04]])), 'StdError': 360.8979500967351}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 7057.518086409697}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 9462.660183056349}}}
Fit and Plot:
Fitting Function maxwellian
Feature speed_kmh
Fitting maxwellian
(array([-0.59819978, 40.34153825]), array([[1.67948660e+09, 7.14177025e+09],
       [7.14177025e+09, 3.03693298e+10]]))
maxwellian fit:  -0.598199780684456   40.3415382522827
Convergence fit maxwellian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2697.809851930523}, 'speed_kmh': {'fit': (array([-0.59819978, 40.34153825]), array([[1.67948660e+09, 7.14177025e+09],
       [7.14177025e+09, 3.03693298e+10]])), 'StdError': 2633.9806575967486}}, 'gaussian': {'av_speed': {'fit': (array([4.90701515e-05, 1.73029063e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2445.114230460409}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 7.16137927e+09, -1.48784016e+00]), array([[ 7.65360779e+17, -1.29562441e+07],
       [-1.29562441e+07,  2.19908032e-04]])), 'StdError': 306.74609692831075}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.51706136e+11, -1.98845440e+00]), array([[ 6.72131410e+20, -5.94385282e+08],
       [-5.94385282e+08,  5.26178935e-04]])), 'StdError': 360.8979500967351}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 7057.518086409697}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 9462.660183056349}}}
Fitting Function gaussian
Feature speed_kmh
Fitting gaussian
(array([6.28321622, 0.3101087 ]), array([[ 9.32009274e+10, -3.66989002e+09],
       [-3.66989002e+09,  9.88758966e+10]]))
gaussian fit:  6.28321621578693   0.31010869768893984
Convergence fit gaussian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2697.809851930523}, 'speed_kmh': {'fit': (array([-0.59819978, 40.34153825]), array([[1.67948660e+09, 7.14177025e+09],
       [7.14177025e+09, 3.03693298e+10]])), 'StdError': 2633.9806575967486}}, 'gaussian': {'av_speed': {'fit': (array([4.90701515e-05, 1.73029063e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2445.114230460409}, 'speed_kmh': {'fit': (array([6.28321622, 0.3101087 ]), array([[ 9.32009274e+10, -3.66989002e+09],
       [-3.66989002e+09,  9.88758966e+10]])), 'StdError': 2697.8042153340457}}, 'powerlaw': {'lenght': {'fit': (array([ 7.16137927e+09, -1.48784016e+00]), array([[ 7.65360779e+17, -1.29562441e+07],
       [-1.29562441e+07,  2.19908032e-04]])), 'StdError': 306.74609692831075}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.51706136e+11, -1.98845440e+00]), array([[ 6.72131410e+20, -5.94385282e+08],
       [-5.94385282e+08,  5.26178935e-04]])), 'StdError': 360.8979500967351}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 7057.518086409697}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 9462.660183056349}}}
Fitting Function powerlaw
Feature speed_kmh
Fitting Function exponential
Feature speed_kmh
Fit and Plot:
Fitting Function maxwellian
Feature lenght_km
Fitting Function gaussian
Feature lenght_km
Fitting Function powerlaw
Feature lenght_km
Fitting powerlaw
(array([ 2.46306799e+05, -1.48784053e+00]), array([[ 2.56044482e+07, -7.14459215e+01],
       [-7.14459215e+01,  2.19905608e-04]]))
powerlaw fit:  246306.79872864985   -1.4878405259191647
Convergence fit powerlaw:  False
Optimal parameters:  [ 2.46316746e+05 -1.48786807e+00]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2697.809851930523}, 'speed_kmh': {'fit': (array([-0.59819978, 40.34153825]), array([[1.67948660e+09, 7.14177025e+09],
       [7.14177025e+09, 3.03693298e+10]])), 'StdError': 2633.9806575967486}}, 'gaussian': {'av_speed': {'fit': (array([4.90701515e-05, 1.73029063e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2445.114230460409}, 'speed_kmh': {'fit': (array([6.28321622, 0.3101087 ]), array([[ 9.32009274e+10, -3.66989002e+09],
       [-3.66989002e+09,  9.88758966e+10]])), 'StdError': 2697.8042153340457}}, 'powerlaw': {'lenght': {'fit': (array([ 7.16137927e+09, -1.48784016e+00]), array([[ 7.65360779e+17, -1.29562441e+07],
       [-1.29562441e+07,  2.19908032e-04]])), 'StdError': 306.74609692831075}, 'lenght_km': {'fit': (array([ 2.46306799e+05, -1.48784053e+00]), array([[ 2.56044482e+07, -7.14459215e+01],
       [-7.14459215e+01,  2.19905608e-04]])), 'StdError': 306.74609692820684}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.51706136e+11, -1.98845440e+00]), array([[ 6.72131410e+20, -5.94385282e+08],
       [-5.94385282e+08,  5.26178935e-04]])), 'StdError': 360.8979500967351}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 7057.518086409697}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 9462.660183056349}}}
Fitting Function exponential
Feature lenght_km
Fitting exponential
(array([9.54724907e+04, 2.50095692e-01]), array([[1.61749372e+07, 3.50590570e+01],
       [3.50590570e+01, 9.18215040e-05]]))
exponential fit:  95472.4906601166   0.2500956923361461
Convergence fit exponential:  False
Optimal parameters:  [9.54771293e+04 2.50106070e-01]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2697.809851930523}, 'speed_kmh': {'fit': (array([-0.59819978, 40.34153825]), array([[1.67948660e+09, 7.14177025e+09],
       [7.14177025e+09, 3.03693298e+10]])), 'StdError': 2633.9806575967486}}, 'gaussian': {'av_speed': {'fit': (array([4.90701515e-05, 1.73029063e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2445.114230460409}, 'speed_kmh': {'fit': (array([6.28321622, 0.3101087 ]), array([[ 9.32009274e+10, -3.66989002e+09],
       [-3.66989002e+09,  9.88758966e+10]])), 'StdError': 2697.8042153340457}}, 'powerlaw': {'lenght': {'fit': (array([ 7.16137927e+09, -1.48784016e+00]), array([[ 7.65360779e+17, -1.29562441e+07],
       [-1.29562441e+07,  2.19908032e-04]])), 'StdError': 306.74609692831075}, 'lenght_km': {'fit': (array([ 2.46306799e+05, -1.48784053e+00]), array([[ 2.56044482e+07, -7.14459215e+01],
       [-7.14459215e+01,  2.19905608e-04]])), 'StdError': 306.74609692820684}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.51706136e+11, -1.98845440e+00]), array([[ 6.72131410e+20, -5.94385282e+08],
       [-5.94385282e+08,  5.26178935e-04]])), 'StdError': 360.8979500967351}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 7057.518086409697}, 'lenght_km': {'fit': (array([9.54724907e+04, 2.50095692e-01]), array([[1.61749372e+07, 3.50590570e+01],
       [3.50590570e+01, 9.18215040e-05]])), 'StdError': 849.0476796615499}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 9462.660183056349}}}
Fit and Plot:
Fitting Function maxwellian
Feature time_hours
Fitting Function gaussian
Feature time_hours
Fitting Function powerlaw
Feature time_hours
Fitting powerlaw
(array([ 1.28664213e+04, -1.98845445e+00]), array([[5.30690434e+04, 5.02795020e+00],
       [5.02795020e+00, 5.26178563e-04]]))
powerlaw fit:  12866.421321482465   -1.988454446388076
Convergence fit powerlaw:  False
Optimal parameters:  [ 1.28664030e+04 -1.98845605e+00]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2697.809851930523}, 'speed_kmh': {'fit': (array([-0.59819978, 40.34153825]), array([[1.67948660e+09, 7.14177025e+09],
       [7.14177025e+09, 3.03693298e+10]])), 'StdError': 2633.9806575967486}}, 'gaussian': {'av_speed': {'fit': (array([4.90701515e-05, 1.73029063e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2445.114230460409}, 'speed_kmh': {'fit': (array([6.28321622, 0.3101087 ]), array([[ 9.32009274e+10, -3.66989002e+09],
       [-3.66989002e+09,  9.88758966e+10]])), 'StdError': 2697.8042153340457}}, 'powerlaw': {'lenght': {'fit': (array([ 7.16137927e+09, -1.48784016e+00]), array([[ 7.65360779e+17, -1.29562441e+07],
       [-1.29562441e+07,  2.19908032e-04]])), 'StdError': 306.74609692831075}, 'lenght_km': {'fit': (array([ 2.46306799e+05, -1.48784053e+00]), array([[ 2.56044482e+07, -7.14459215e+01],
       [-7.14459215e+01,  2.19905608e-04]])), 'StdError': 306.74609692820684}, 'time_hours': {'fit': (array([ 1.28664213e+04, -1.98845445e+00]), array([[5.30690434e+04, 5.02795020e+00],
       [5.02795020e+00, 5.26178563e-04]])), 'StdError': 360.89795009665573}, 'time': {'fit': (array([ 1.51706136e+11, -1.98845440e+00]), array([[ 6.72131410e+20, -5.94385282e+08],
       [-5.94385282e+08,  5.26178935e-04]])), 'StdError': 360.8979500967351}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 7057.518086409697}, 'lenght_km': {'fit': (array([9.54724907e+04, 2.50095692e-01]), array([[1.61749372e+07, 3.50590570e+01],
       [3.50590570e+01, 9.18215040e-05]])), 'StdError': 849.0476796615499}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 9462.660183056349}}}
Fitting Function exponential
Feature time_hours
Fitting exponential
(array([2.14635027e+05, 2.72345611e+00]), array([[2.69910988e+07, 2.36122308e+02],
       [2.36122308e+02, 2.24865528e-03]]))
exponential fit:  214635.02715092135   2.723456114049809
Convergence fit exponential:  False
Optimal parameters:  [2.14636237e+05 2.72346669e+00]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2697.809851930523}, 'speed_kmh': {'fit': (array([-0.59819978, 40.34153825]), array([[1.67948660e+09, 7.14177025e+09],
       [7.14177025e+09, 3.03693298e+10]])), 'StdError': 2633.9806575967486}}, 'gaussian': {'av_speed': {'fit': (array([4.90701515e-05, 1.73029063e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2445.114230460409}, 'speed_kmh': {'fit': (array([6.28321622, 0.3101087 ]), array([[ 9.32009274e+10, -3.66989002e+09],
       [-3.66989002e+09,  9.88758966e+10]])), 'StdError': 2697.8042153340457}}, 'powerlaw': {'lenght': {'fit': (array([ 7.16137927e+09, -1.48784016e+00]), array([[ 7.65360779e+17, -1.29562441e+07],
       [-1.29562441e+07,  2.19908032e-04]])), 'StdError': 306.74609692831075}, 'lenght_km': {'fit': (array([ 2.46306799e+05, -1.48784053e+00]), array([[ 2.56044482e+07, -7.14459215e+01],
       [-7.14459215e+01,  2.19905608e-04]])), 'StdError': 306.74609692820684}, 'time_hours': {'fit': (array([ 1.28664213e+04, -1.98845445e+00]), array([[5.30690434e+04, 5.02795020e+00],
       [5.02795020e+00, 5.26178563e-04]])), 'StdError': 360.89795009665573}, 'time': {'fit': (array([ 1.51706136e+11, -1.98845440e+00]), array([[ 6.72131410e+20, -5.94385282e+08],
       [-5.94385282e+08,  5.26178935e-04]])), 'StdError': 360.8979500967351}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 7057.518086409697}, 'lenght_km': {'fit': (array([9.54724907e+04, 2.50095692e-01]), array([[1.61749372e+07, 3.50590570e+01],
       [3.50590570e+01, 9.18215040e-05]])), 'StdError': 849.0476796615499}, 'time_hours': {'fit': (array([2.14635027e+05, 2.72345611e+00]), array([[2.69910988e+07, 2.36122308e+02],
       [2.36122308e+02, 2.24865528e-03]])), 'StdError': 452.2031860906728}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 9462.660183056349}}}
Return Fit Info From Dict:
Fit and Plot:
Fitting Function maxwellian
Feature av_speed
Fitting maxwellian
(array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]]))
maxwellian fit:  6000.0   0.3
Convergence fit maxwellian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 884.2034832273906}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': None, 'StdError': None}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function gaussian
Feature av_speed
Fitting gaussian
(array([1.29537584e-04, 1.24581528e+00]), array([[inf, inf],
       [inf, inf]]))
gaussian fit:  0.00012953758404265556   1.2458152816803298
Convergence fit gaussian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 884.2034832273906}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([1.29537584e-04, 1.24581528e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 781.2503567999186}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function powerlaw
Feature av_speed
Fitting Function exponential
Feature av_speed
Fit and Plot:
Fitting Function maxwellian
Feature lenght
Fitting Function gaussian
Feature lenght
Fitting Function powerlaw
Feature lenght
Fitting powerlaw
(array([ 4.52780315e+10, -2.06008745e+00]), array([[ 1.47531869e+19, -4.46502207e+07],
       [-4.46502207e+07,  1.35274971e-04]]))
powerlaw fit:  45278031543.18811   -2.060087448175456
Convergence fit powerlaw:  False
Optimal parameters:  [ 1.94345748e+07 -1.03326268e+00]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 884.2034832273906}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([1.29537584e-04, 1.24581528e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 781.2503567999186}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 4.52780315e+10, -2.06008745e+00]), array([[ 1.47531869e+19, -4.46502207e+07],
       [-4.46502207e+07,  1.35274971e-04]])), 'StdError': 44.16953288703505}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function exponential
Feature lenght
Fitting exponential
(array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]]))
exponential fit:  6000.0   0.3
Convergence fit exponential:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 884.2034832273906}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([1.29537584e-04, 1.24581528e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 781.2503567999186}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 4.52780315e+10, -2.06008745e+00]), array([[ 1.47531869e+19, -4.46502207e+07],
       [-4.46502207e+07,  1.35274971e-04]])), 'StdError': 44.16953288703505}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2320.089136218693}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fit and Plot:
Fitting Function maxwellian
Feature time
Fitting Function gaussian
Feature time
Fitting Function powerlaw
Feature time
Fitting powerlaw
(array([ 3.03891044e+09, -1.67026318e+00]), array([[ 1.52200204e+17, -6.66260742e+06],
       [-6.66260742e+06,  2.92247514e-04]]))
powerlaw fit:  3038910435.352492   -1.6702631802969345
Convergence fit powerlaw:  False
Optimal parameters:  [ 8.39370524e+03 -7.47341113e-01]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 884.2034832273906}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([1.29537584e-04, 1.24581528e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 781.2503567999186}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 4.52780315e+10, -2.06008745e+00]), array([[ 1.47531869e+19, -4.46502207e+07],
       [-4.46502207e+07,  1.35274971e-04]])), 'StdError': 44.16953288703505}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 3.03891044e+09, -1.67026318e+00]), array([[ 1.52200204e+17, -6.66260742e+06],
       [-6.66260742e+06,  2.92247514e-04]])), 'StdError': 81.12373755961225}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2320.089136218693}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function exponential
Feature time
Fitting exponential
(array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]]))
exponential fit:  6000.0   0.3
Convergence fit exponential:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 884.2034832273906}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([1.29537584e-04, 1.24581528e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 781.2503567999186}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 4.52780315e+10, -2.06008745e+00]), array([[ 1.47531869e+19, -4.46502207e+07],
       [-4.46502207e+07,  1.35274971e-04]])), 'StdError': 44.16953288703505}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 3.03891044e+09, -1.67026318e+00]), array([[ 1.52200204e+17, -6.66260742e+06],
       [-6.66260742e+06,  2.92247514e-04]])), 'StdError': 81.12373755961225}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2320.089136218693}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2031.7252668606548}}}
Fit and Plot:
Fitting Function maxwellian
Feature speed_kmh
Fitting maxwellian
(array([-0.31228336, 11.95335243]), array([[563.80668775, 124.86323952],
       [124.86323952,  27.71927212]]))
maxwellian fit:  -0.3122833569916757   11.953352431828808
Convergence fit maxwellian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 884.2034832273906}, 'speed_kmh': {'fit': (array([-0.31228336, 11.95335243]), array([[563.80668775, 124.86323952],
       [124.86323952,  27.71927212]])), 'StdError': 868.866966168358}}, 'gaussian': {'av_speed': {'fit': (array([1.29537584e-04, 1.24581528e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 781.2503567999186}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 4.52780315e+10, -2.06008745e+00]), array([[ 1.47531869e+19, -4.46502207e+07],
       [-4.46502207e+07,  1.35274971e-04]])), 'StdError': 44.16953288703505}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 3.03891044e+09, -1.67026318e+00]), array([[ 1.52200204e+17, -6.66260742e+06],
       [-6.66260742e+06,  2.92247514e-04]])), 'StdError': 81.12373755961225}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2320.089136218693}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2031.7252668606548}}}
Fitting Function gaussian
Feature speed_kmh
Fitting gaussian
(array([9.30021991e-05, 3.60233185e+00]), array([[inf, inf],
       [inf, inf]]))
gaussian fit:  9.300219911815553e-05   3.602331851853144
Convergence fit gaussian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 884.2034832273906}, 'speed_kmh': {'fit': (array([-0.31228336, 11.95335243]), array([[563.80668775, 124.86323952],
       [124.86323952,  27.71927212]])), 'StdError': 868.866966168358}}, 'gaussian': {'av_speed': {'fit': (array([1.29537584e-04, 1.24581528e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 781.2503567999186}, 'speed_kmh': {'fit': (array([9.30021991e-05, 3.60233185e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 786.6354301708002}}, 'powerlaw': {'lenght': {'fit': (array([ 4.52780315e+10, -2.06008745e+00]), array([[ 1.47531869e+19, -4.46502207e+07],
       [-4.46502207e+07,  1.35274971e-04]])), 'StdError': 44.16953288703505}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 3.03891044e+09, -1.67026318e+00]), array([[ 1.52200204e+17, -6.66260742e+06],
       [-6.66260742e+06,  2.92247514e-04]])), 'StdError': 81.12373755961225}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2320.089136218693}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2031.7252668606548}}}
Fitting Function powerlaw
Feature speed_kmh
Fitting Function exponential
Feature speed_kmh
Fit and Plot:
Fitting Function maxwellian
Feature lenght_km
Fitting Function gaussian
Feature lenght_km
Fitting Function powerlaw
Feature lenght_km
Fitting powerlaw
(array([ 2.98968324e+04, -2.06008735e+00]), array([[ 2.44202370e+04, -1.54600936e+00],
       [-1.54600936e+00,  1.35275644e-04]]))
powerlaw fit:  29896.83243109955   -2.0600873517394405
Convergence fit powerlaw:  False
Optimal parameters:  [ 2.98968206e+04 -2.06008660e+00]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 884.2034832273906}, 'speed_kmh': {'fit': (array([-0.31228336, 11.95335243]), array([[563.80668775, 124.86323952],
       [124.86323952,  27.71927212]])), 'StdError': 868.866966168358}}, 'gaussian': {'av_speed': {'fit': (array([1.29537584e-04, 1.24581528e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 781.2503567999186}, 'speed_kmh': {'fit': (array([9.30021991e-05, 3.60233185e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 786.6354301708002}}, 'powerlaw': {'lenght': {'fit': (array([ 4.52780315e+10, -2.06008745e+00]), array([[ 1.47531869e+19, -4.46502207e+07],
       [-4.46502207e+07,  1.35274971e-04]])), 'StdError': 44.16953288703505}, 'lenght_km': {'fit': (array([ 2.98968324e+04, -2.06008735e+00]), array([[ 2.44202370e+04, -1.54600936e+00],
       [-1.54600936e+00,  1.35275644e-04]])), 'StdError': 44.1695328869817}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 3.03891044e+09, -1.67026318e+00]), array([[ 1.52200204e+17, -6.66260742e+06],
       [-6.66260742e+06,  2.92247514e-04]])), 'StdError': 81.12373755961225}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2320.089136218693}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2031.7252668606548}}}
Fitting Function exponential
Feature lenght_km
Fitting exponential
(array([5.71315695e+04, 9.51387225e-01]), array([[4.27579903e+06, 4.61457588e+01],
       [4.61457588e+01, 5.37762290e-04]]))
exponential fit:  57131.56950171533   0.9513872251989025
Convergence fit exponential:  False
Optimal parameters:  [5.71310459e+04 9.51381540e-01]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 884.2034832273906}, 'speed_kmh': {'fit': (array([-0.31228336, 11.95335243]), array([[563.80668775, 124.86323952],
       [124.86323952,  27.71927212]])), 'StdError': 868.866966168358}}, 'gaussian': {'av_speed': {'fit': (array([1.29537584e-04, 1.24581528e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 781.2503567999186}, 'speed_kmh': {'fit': (array([9.30021991e-05, 3.60233185e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 786.6354301708002}}, 'powerlaw': {'lenght': {'fit': (array([ 4.52780315e+10, -2.06008745e+00]), array([[ 1.47531869e+19, -4.46502207e+07],
       [-4.46502207e+07,  1.35274971e-04]])), 'StdError': 44.16953288703505}, 'lenght_km': {'fit': (array([ 2.98968324e+04, -2.06008735e+00]), array([[ 2.44202370e+04, -1.54600936e+00],
       [-1.54600936e+00,  1.35275644e-04]])), 'StdError': 44.1695328869817}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 3.03891044e+09, -1.67026318e+00]), array([[ 1.52200204e+17, -6.66260742e+06],
       [-6.66260742e+06,  2.92247514e-04]])), 'StdError': 81.12373755961225}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2320.089136218693}, 'lenght_km': {'fit': (array([5.71315695e+04, 9.51387225e-01]), array([[4.27579903e+06, 4.61457588e+01],
       [4.61457588e+01, 5.37762290e-04]])), 'StdError': 157.793470063699}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2031.7252668606548}}}
Fit and Plot:
Fitting Function maxwellian
Feature time_hours
Fitting Function gaussian
Feature time_hours
Fitting Function powerlaw
Feature time_hours
Fitting powerlaw
(array([ 3.48944742e+03, -1.67026357e+00]), array([[2.08486245e+03, 7.00649350e-01],
       [7.00649350e-01, 2.92244220e-04]]))
powerlaw fit:  3489.4474206801856   -1.6702635731998734
Convergence fit powerlaw:  False
Optimal parameters:  [ 3.48944528e+03 -1.67026428e+00]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 884.2034832273906}, 'speed_kmh': {'fit': (array([-0.31228336, 11.95335243]), array([[563.80668775, 124.86323952],
       [124.86323952,  27.71927212]])), 'StdError': 868.866966168358}}, 'gaussian': {'av_speed': {'fit': (array([1.29537584e-04, 1.24581528e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 781.2503567999186}, 'speed_kmh': {'fit': (array([9.30021991e-05, 3.60233185e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 786.6354301708002}}, 'powerlaw': {'lenght': {'fit': (array([ 4.52780315e+10, -2.06008745e+00]), array([[ 1.47531869e+19, -4.46502207e+07],
       [-4.46502207e+07,  1.35274971e-04]])), 'StdError': 44.16953288703505}, 'lenght_km': {'fit': (array([ 2.98968324e+04, -2.06008735e+00]), array([[ 2.44202370e+04, -1.54600936e+00],
       [-1.54600936e+00,  1.35275644e-04]])), 'StdError': 44.1695328869817}, 'time_hours': {'fit': (array([ 3.48944742e+03, -1.67026357e+00]), array([[2.08486245e+03, 7.00649350e-01],
       [7.00649350e-01, 2.92244220e-04]])), 'StdError': 81.12373755901112}, 'time': {'fit': (array([ 3.03891044e+09, -1.67026318e+00]), array([[ 1.52200204e+17, -6.66260742e+06],
       [-6.66260742e+06,  2.92247514e-04]])), 'StdError': 81.12373755961225}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2320.089136218693}, 'lenght_km': {'fit': (array([5.71315695e+04, 9.51387225e-01]), array([[4.27579903e+06, 4.61457588e+01],
       [4.61457588e+01, 5.37762290e-04]])), 'StdError': 157.793470063699}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2031.7252668606548}}}
Fitting Function exponential
Feature time_hours
Fitting exponential
(array([3.38593378e+04, 2.11287685e+00]), array([[1.29413347e+06, 6.29164405e+01],
       [6.29164405e+01, 3.52220545e-03]]))
exponential fit:  33859.33781863397   2.1128768514206295
Convergence fit exponential:  False
Optimal parameters:  [3.38594066e+04 2.11288030e+00]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 884.2034832273906}, 'speed_kmh': {'fit': (array([-0.31228336, 11.95335243]), array([[563.80668775, 124.86323952],
       [124.86323952,  27.71927212]])), 'StdError': 868.866966168358}}, 'gaussian': {'av_speed': {'fit': (array([1.29537584e-04, 1.24581528e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 781.2503567999186}, 'speed_kmh': {'fit': (array([9.30021991e-05, 3.60233185e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 786.6354301708002}}, 'powerlaw': {'lenght': {'fit': (array([ 4.52780315e+10, -2.06008745e+00]), array([[ 1.47531869e+19, -4.46502207e+07],
       [-4.46502207e+07,  1.35274971e-04]])), 'StdError': 44.16953288703505}, 'lenght_km': {'fit': (array([ 2.98968324e+04, -2.06008735e+00]), array([[ 2.44202370e+04, -1.54600936e+00],
       [-1.54600936e+00,  1.35275644e-04]])), 'StdError': 44.1695328869817}, 'time_hours': {'fit': (array([ 3.48944742e+03, -1.67026357e+00]), array([[2.08486245e+03, 7.00649350e-01],
       [7.00649350e-01, 2.92244220e-04]])), 'StdError': 81.12373755901112}, 'time': {'fit': (array([ 3.03891044e+09, -1.67026318e+00]), array([[ 1.52200204e+17, -6.66260742e+06],
       [-6.66260742e+06,  2.92247514e-04]])), 'StdError': 81.12373755961225}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2320.089136218693}, 'lenght_km': {'fit': (array([5.71315695e+04, 9.51387225e-01]), array([[4.27579903e+06, 4.61457588e+01],
       [4.61457588e+01, 5.37762290e-04]])), 'StdError': 157.793470063699}, 'time_hours': {'fit': (array([3.38593378e+04, 2.11287685e+00]), array([[1.29413347e+06, 6.29164405e+01],
       [6.29164405e+01, 3.52220545e-03]])), 'StdError': 170.935686937449}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2031.7252668606548}}}
Return Fit Info From Dict:
Fit and Plot:
Fitting Function maxwellian
Feature av_speed
Fitting maxwellian
(array([-0.27136713,  7.66382388]), array([[ 0.00477301, -0.00033365],
       [-0.00033365,  0.02602043]]))
maxwellian fit:  -0.2713671272736271   7.663823878986959
Convergence fit maxwellian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.27136713,  7.66382388]), array([[ 0.00477301, -0.00033365],
       [-0.00033365,  0.02602043]])), 'StdError': 504.30055260277817}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': None, 'StdError': None}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function gaussian
Feature av_speed
Fitting gaussian
(array([2.11659737e-04, 6.31370787e+00]), array([[inf, inf],
       [inf, inf]]))
gaussian fit:  0.0002116597371421525   6.313707870325861
Convergence fit gaussian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.27136713,  7.66382388]), array([[ 0.00477301, -0.00033365],
       [-0.00033365,  0.02602043]])), 'StdError': 504.30055260277817}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([2.11659737e-04, 6.31370787e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 543.3671502768639}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function powerlaw
Feature av_speed
Fitting Function exponential
Feature av_speed
Fit and Plot:
Fitting Function maxwellian
Feature lenght
Fitting Function gaussian
Feature lenght
Fitting Function powerlaw
Feature lenght
Fitting powerlaw
(array([ 1.04009926e+08, -1.24516555e+00]), array([[ 2.89878183e+15, -3.54285546e+06],
       [-3.54285546e+06,  4.35391981e-03]]))
powerlaw fit:  104009926.13518499   -1.2451655541416136
Convergence fit powerlaw:  True
Optimal parameters:  [ 2.91928388e+07 -1.08650507e+00]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.27136713,  7.66382388]), array([[ 0.00477301, -0.00033365],
       [-0.00033365,  0.02602043]])), 'StdError': 504.30055260277817}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([2.11659737e-04, 6.31370787e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 543.3671502768639}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 1.04009926e+08, -1.24516555e+00]), array([[ 2.89878183e+15, -3.54285546e+06],
       [-3.54285546e+06,  4.35391981e-03]])), 'StdError': 396.3860048219895}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function exponential
Feature lenght
Fitting exponential
(array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]]))
exponential fit:  6000.0   0.3
Convergence fit exponential:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.27136713,  7.66382388]), array([[ 0.00477301, -0.00033365],
       [-0.00033365,  0.02602043]])), 'StdError': 504.30055260277817}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([2.11659737e-04, 6.31370787e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 543.3671502768639}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 1.04009926e+08, -1.24516555e+00]), array([[ 2.89878183e+15, -3.54285546e+06],
       [-3.54285546e+06,  4.35391981e-03]])), 'StdError': 396.3860048219895}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1543.6702821522476}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fit and Plot:
Fitting Function maxwellian
Feature time
Fitting Function gaussian
Feature time
Fitting Function powerlaw
Feature time
Fitting powerlaw
(array([ 1.67403323e+10, -1.95209396e+00]), array([[ 8.05911356e+17, -6.64078950e+06],
       [-6.64078950e+06,  5.47858656e-05]]))
powerlaw fit:  16740332302.20837   -1.9520939570132911
Convergence fit powerlaw:  False
Optimal parameters:  [ 8.31809140e+03 -7.46906326e-01]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.27136713,  7.66382388]), array([[ 0.00477301, -0.00033365],
       [-0.00033365,  0.02602043]])), 'StdError': 504.30055260277817}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([2.11659737e-04, 6.31370787e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 543.3671502768639}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 1.04009926e+08, -1.24516555e+00]), array([[ 2.89878183e+15, -3.54285546e+06],
       [-3.54285546e+06,  4.35391981e-03]])), 'StdError': 396.3860048219895}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.67403323e+10, -1.95209396e+00]), array([[ 8.05911356e+17, -6.64078950e+06],
       [-6.64078950e+06,  5.47858656e-05]])), 'StdError': 26.416287105214256}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1543.6702821522476}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function exponential
Feature time
Fitting exponential
(array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]]))
exponential fit:  6000.0   0.3
Convergence fit exponential:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.27136713,  7.66382388]), array([[ 0.00477301, -0.00033365],
       [-0.00033365,  0.02602043]])), 'StdError': 504.30055260277817}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([2.11659737e-04, 6.31370787e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 543.3671502768639}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 1.04009926e+08, -1.24516555e+00]), array([[ 2.89878183e+15, -3.54285546e+06],
       [-3.54285546e+06,  4.35391981e-03]])), 'StdError': 396.3860048219895}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.67403323e+10, -1.95209396e+00]), array([[ 8.05911356e+17, -6.64078950e+06],
       [-6.64078950e+06,  5.47858656e-05]])), 'StdError': 26.416287105214256}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1543.6702821522476}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2062.747667554129}}}
Fit and Plot:
Fitting Function maxwellian
Feature speed_kmh
Fitting maxwellian
(array([ 0.81495639, 23.73706996]), array([[0.04612008, 0.00310222],
       [0.00310222, 0.25131554]]))
maxwellian fit:  0.8149563864847521   23.737069963012345
Convergence fit maxwellian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.27136713,  7.66382388]), array([[ 0.00477301, -0.00033365],
       [-0.00033365,  0.02602043]])), 'StdError': 504.30055260277817}, 'speed_kmh': {'fit': (array([ 0.81495639, 23.73706996]), array([[0.04612008, 0.00310222],
       [0.00310222, 0.25131554]])), 'StdError': 506.9413836304517}}, 'gaussian': {'av_speed': {'fit': (array([2.11659737e-04, 6.31370787e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 543.3671502768639}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 1.04009926e+08, -1.24516555e+00]), array([[ 2.89878183e+15, -3.54285546e+06],
       [-3.54285546e+06,  4.35391981e-03]])), 'StdError': 396.3860048219895}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.67403323e+10, -1.95209396e+00]), array([[ 8.05911356e+17, -6.64078950e+06],
       [-6.64078950e+06,  5.47858656e-05]])), 'StdError': 26.416287105214256}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1543.6702821522476}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2062.747667554129}}}
Fitting Function gaussian
Feature speed_kmh
Fitting gaussian
(array([24.85495011,  0.30075338]), array([[7.10562142e+10, 8.70755484e+09],
       [8.70755484e+09, 5.96177099e+10]]))
gaussian fit:  24.854950107066607   0.30075338364574383
Convergence fit gaussian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.27136713,  7.66382388]), array([[ 0.00477301, -0.00033365],
       [-0.00033365,  0.02602043]])), 'StdError': 504.30055260277817}, 'speed_kmh': {'fit': (array([ 0.81495639, 23.73706996]), array([[0.04612008, 0.00310222],
       [0.00310222, 0.25131554]])), 'StdError': 506.9413836304517}}, 'gaussian': {'av_speed': {'fit': (array([2.11659737e-04, 6.31370787e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 543.3671502768639}, 'speed_kmh': {'fit': (array([24.85495011,  0.30075338]), array([[7.10562142e+10, 8.70755484e+09],
       [8.70755484e+09, 5.96177099e+10]])), 'StdError': 557.6192226922806}}, 'powerlaw': {'lenght': {'fit': (array([ 1.04009926e+08, -1.24516555e+00]), array([[ 2.89878183e+15, -3.54285546e+06],
       [-3.54285546e+06,  4.35391981e-03]])), 'StdError': 396.3860048219895}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.67403323e+10, -1.95209396e+00]), array([[ 8.05911356e+17, -6.64078950e+06],
       [-6.64078950e+06,  5.47858656e-05]])), 'StdError': 26.416287105214256}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1543.6702821522476}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2062.747667554129}}}
Fitting Function powerlaw
Feature speed_kmh
Fitting Function exponential
Feature speed_kmh
Fit and Plot:
Fitting Function maxwellian
Feature lenght_km
Fitting Function gaussian
Feature lenght_km
Fitting Function powerlaw
Feature lenght_km
Fitting powerlaw
(array([ 1.91238445e+04, -1.24515819e+00]), array([[ 1.87804353e+06, -7.63899073e+01],
       [-7.63899073e+01,  4.35415872e-03]]))
powerlaw fit:  19123.844478019993   -1.245158193111289
Convergence fit powerlaw:  False
Optimal parameters:  [ 1.91238526e+04 -1.24515853e+00]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.27136713,  7.66382388]), array([[ 0.00477301, -0.00033365],
       [-0.00033365,  0.02602043]])), 'StdError': 504.30055260277817}, 'speed_kmh': {'fit': (array([ 0.81495639, 23.73706996]), array([[0.04612008, 0.00310222],
       [0.00310222, 0.25131554]])), 'StdError': 506.9413836304517}}, 'gaussian': {'av_speed': {'fit': (array([2.11659737e-04, 6.31370787e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 543.3671502768639}, 'speed_kmh': {'fit': (array([24.85495011,  0.30075338]), array([[7.10562142e+10, 8.70755484e+09],
       [8.70755484e+09, 5.96177099e+10]])), 'StdError': 557.6192226922806}}, 'powerlaw': {'lenght': {'fit': (array([ 1.04009926e+08, -1.24516555e+00]), array([[ 2.89878183e+15, -3.54285546e+06],
       [-3.54285546e+06,  4.35391981e-03]])), 'StdError': 396.3860048219895}, 'lenght_km': {'fit': (array([ 1.91238445e+04, -1.24515819e+00]), array([[ 1.87804353e+06, -7.63899073e+01],
       [-7.63899073e+01,  4.35415872e-03]])), 'StdError': 396.3860047541797}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.67403323e+10, -1.95209396e+00]), array([[ 8.05911356e+17, -6.64078950e+06],
       [-6.64078950e+06,  5.47858656e-05]])), 'StdError': 26.416287105214256}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1543.6702821522476}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2062.747667554129}}}
Fitting Function exponential
Feature lenght_km
Fitting exponential
(array([1.39265005e+04, 2.72142821e-01]), array([[8.11770978e+04, 1.44755075e+00],
       [1.44755075e+00, 3.50598035e-05]]))
exponential fit:  13926.500535819989   0.2721428211970558
Convergence fit exponential:  False
Optimal parameters:  [1.39264169e+04 2.72141328e-01]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.27136713,  7.66382388]), array([[ 0.00477301, -0.00033365],
       [-0.00033365,  0.02602043]])), 'StdError': 504.30055260277817}, 'speed_kmh': {'fit': (array([ 0.81495639, 23.73706996]), array([[0.04612008, 0.00310222],
       [0.00310222, 0.25131554]])), 'StdError': 506.9413836304517}}, 'gaussian': {'av_speed': {'fit': (array([2.11659737e-04, 6.31370787e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 543.3671502768639}, 'speed_kmh': {'fit': (array([24.85495011,  0.30075338]), array([[7.10562142e+10, 8.70755484e+09],
       [8.70755484e+09, 5.96177099e+10]])), 'StdError': 557.6192226922806}}, 'powerlaw': {'lenght': {'fit': (array([ 1.04009926e+08, -1.24516555e+00]), array([[ 2.89878183e+15, -3.54285546e+06],
       [-3.54285546e+06,  4.35391981e-03]])), 'StdError': 396.3860048219895}, 'lenght_km': {'fit': (array([ 1.91238445e+04, -1.24515819e+00]), array([[ 1.87804353e+06, -7.63899073e+01],
       [-7.63899073e+01,  4.35415872e-03]])), 'StdError': 396.3860047541797}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.67403323e+10, -1.95209396e+00]), array([[ 8.05911356e+17, -6.64078950e+06],
       [-6.64078950e+06,  5.47858656e-05]])), 'StdError': 26.416287105214256}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1543.6702821522476}, 'lenght_km': {'fit': (array([1.39265005e+04, 2.72142821e-01]), array([[8.11770978e+04, 1.44755075e+00],
       [1.44755075e+00, 3.50598035e-05]])), 'StdError': 112.07311831380137}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2062.747667554129}}}
Fit and Plot:
Fitting Function maxwellian
Feature time_hours
Fitting Function gaussian
Feature time_hours
Fitting Function powerlaw
Feature time_hours
Fitting powerlaw
(array([1912.17419862,   -1.95209396]), array([[1.92480648e+02, 9.93009323e-02],
       [9.93009323e-02, 5.47858955e-05]]))
powerlaw fit:  1912.1741986222985   -1.952093956344433
Convergence fit powerlaw:  False
Optimal parameters:  [1912.17388932   -1.95209412]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.27136713,  7.66382388]), array([[ 0.00477301, -0.00033365],
       [-0.00033365,  0.02602043]])), 'StdError': 504.30055260277817}, 'speed_kmh': {'fit': (array([ 0.81495639, 23.73706996]), array([[0.04612008, 0.00310222],
       [0.00310222, 0.25131554]])), 'StdError': 506.9413836304517}}, 'gaussian': {'av_speed': {'fit': (array([2.11659737e-04, 6.31370787e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 543.3671502768639}, 'speed_kmh': {'fit': (array([24.85495011,  0.30075338]), array([[7.10562142e+10, 8.70755484e+09],
       [8.70755484e+09, 5.96177099e+10]])), 'StdError': 557.6192226922806}}, 'powerlaw': {'lenght': {'fit': (array([ 1.04009926e+08, -1.24516555e+00]), array([[ 2.89878183e+15, -3.54285546e+06],
       [-3.54285546e+06,  4.35391981e-03]])), 'StdError': 396.3860048219895}, 'lenght_km': {'fit': (array([ 1.91238445e+04, -1.24515819e+00]), array([[ 1.87804353e+06, -7.63899073e+01],
       [-7.63899073e+01,  4.35415872e-03]])), 'StdError': 396.3860047541797}, 'time_hours': {'fit': (array([1912.17419862,   -1.95209396]), array([[1.92480648e+02, 9.93009323e-02],
       [9.93009323e-02, 5.47858955e-05]])), 'StdError': 26.41628710521429}, 'time': {'fit': (array([ 1.67403323e+10, -1.95209396e+00]), array([[ 8.05911356e+17, -6.64078950e+06],
       [-6.64078950e+06,  5.47858656e-05]])), 'StdError': 26.416287105214256}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1543.6702821522476}, 'lenght_km': {'fit': (array([1.39265005e+04, 2.72142821e-01]), array([[8.11770978e+04, 1.44755075e+00],
       [1.44755075e+00, 3.50598035e-05]])), 'StdError': 112.07311831380137}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2062.747667554129}}}
Fitting Function exponential
Feature time_hours
Fitting exponential
(array([4.64242422e+04, 3.34601526e+00]), array([[2.90675033e+06, 1.44636602e+02],
       [1.44636602e+02, 7.84318673e-03]]))
exponential fit:  46424.24221786943   3.3460152594423103
Convergence fit exponential:  False
Optimal parameters:  [4.64241439e+04 3.34601036e+00]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.27136713,  7.66382388]), array([[ 0.00477301, -0.00033365],
       [-0.00033365,  0.02602043]])), 'StdError': 504.30055260277817}, 'speed_kmh': {'fit': (array([ 0.81495639, 23.73706996]), array([[0.04612008, 0.00310222],
       [0.00310222, 0.25131554]])), 'StdError': 506.9413836304517}}, 'gaussian': {'av_speed': {'fit': (array([2.11659737e-04, 6.31370787e+00]), array([[inf, inf],
       [inf, inf]])), 'StdError': 543.3671502768639}, 'speed_kmh': {'fit': (array([24.85495011,  0.30075338]), array([[7.10562142e+10, 8.70755484e+09],
       [8.70755484e+09, 5.96177099e+10]])), 'StdError': 557.6192226922806}}, 'powerlaw': {'lenght': {'fit': (array([ 1.04009926e+08, -1.24516555e+00]), array([[ 2.89878183e+15, -3.54285546e+06],
       [-3.54285546e+06,  4.35391981e-03]])), 'StdError': 396.3860048219895}, 'lenght_km': {'fit': (array([ 1.91238445e+04, -1.24515819e+00]), array([[ 1.87804353e+06, -7.63899073e+01],
       [-7.63899073e+01,  4.35415872e-03]])), 'StdError': 396.3860047541797}, 'time_hours': {'fit': (array([1912.17419862,   -1.95209396]), array([[1.92480648e+02, 9.93009323e-02],
       [9.93009323e-02, 5.47858955e-05]])), 'StdError': 26.41628710521429}, 'time': {'fit': (array([ 1.67403323e+10, -1.95209396e+00]), array([[ 8.05911356e+17, -6.64078950e+06],
       [-6.64078950e+06,  5.47858656e-05]])), 'StdError': 26.416287105214256}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1543.6702821522476}, 'lenght_km': {'fit': (array([1.39265005e+04, 2.72142821e-01]), array([[8.11770978e+04, 1.44755075e+00],
       [1.44755075e+00, 3.50598035e-05]])), 'StdError': 112.07311831380137}, 'time_hours': {'fit': (array([4.64242422e+04, 3.34601526e+00]), array([[2.90675033e+06, 1.44636602e+02],
       [1.44636602e+02, 7.84318673e-03]])), 'StdError': 150.25184405926734}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 2062.747667554129}}}
Return Fit Info From Dict:
Fit and Plot:
Fitting Function maxwellian
Feature av_speed
Fitting maxwellian
(array([-0.28751956, 14.43013115]), array([[0.00957897, 0.00153005],
       [0.00153005, 0.02065944]]))
maxwellian fit:  -0.2875195631056839   14.430131146234505
Convergence fit maxwellian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.28751956, 14.43013115]), array([[0.00957897, 0.00153005],
       [0.00153005, 0.02065944]])), 'StdError': 1041.156458939244}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': None, 'StdError': None}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function gaussian
Feature av_speed
Fitting gaussian
(array([13.73383318,  0.30083015]), array([[2.61107285e+10, 1.05199210e+09],
       [1.05199210e+09, 2.54510228e+10]]))
gaussian fit:  13.733833175832059   0.30083014698400434
Convergence fit gaussian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.28751956, 14.43013115]), array([[0.00957897, 0.00153005],
       [0.00153005, 0.02065944]])), 'StdError': 1041.156458939244}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([13.73383318,  0.30083015]), array([[2.61107285e+10, 1.05199210e+09],
       [1.05199210e+09, 2.54510228e+10]])), 'StdError': 1126.6670884468313}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function powerlaw
Feature av_speed
Fitting Function exponential
Feature av_speed
Fit and Plot:
Fitting Function maxwellian
Feature lenght
Fitting Function gaussian
Feature lenght
Fitting Function powerlaw
Feature lenght
Fitting powerlaw
(array([ 1.58228738e+07, -9.35416762e-01]), array([[ 7.04557040e+13, -5.17323995e+05],
       [-5.17323995e+05,  3.83868166e-03]]))
powerlaw fit:  15822873.83845678   -0.935416761522509
Convergence fit powerlaw:  False
Optimal parameters:  [ 7.73937877e+03 -7.35997758e-01]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.28751956, 14.43013115]), array([[0.00957897, 0.00153005],
       [0.00153005, 0.02065944]])), 'StdError': 1041.156458939244}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([13.73383318,  0.30083015]), array([[2.61107285e+10, 1.05199210e+09],
       [1.05199210e+09, 2.54510228e+10]])), 'StdError': 1126.6670884468313}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 1.58228738e+07, -9.35416762e-01]), array([[ 7.04557040e+13, -5.17323995e+05],
       [-5.17323995e+05,  3.83868166e-03]])), 'StdError': 701.4104348153419}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function exponential
Feature lenght
Fitting exponential
(array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]]))
exponential fit:  6000.0   0.3
Convergence fit exponential:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.28751956, 14.43013115]), array([[0.00957897, 0.00153005],
       [0.00153005, 0.02065944]])), 'StdError': 1041.156458939244}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([13.73383318,  0.30083015]), array([[2.61107285e+10, 1.05199210e+09],
       [1.05199210e+09, 2.54510228e+10]])), 'StdError': 1126.6670884468313}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 1.58228738e+07, -9.35416762e-01]), array([[ 7.04557040e+13, -5.17323995e+05],
       [-5.17323995e+05,  3.83868166e-03]])), 'StdError': 701.4104348153419}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1991.8464649666148}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fit and Plot:
Fitting Function maxwellian
Feature time
Fitting Function gaussian
Feature time
Fitting Function powerlaw
Feature time
Fitting powerlaw
(array([ 1.03752466e+10, -1.81367441e+00]), array([[ 6.41002988e+18, -8.51782858e+07],
       [-8.51782858e+07,  1.13366385e-03]]))
powerlaw fit:  10375246591.32458   -1.8136744147491703
Convergence fit powerlaw:  False
Optimal parameters:  [ 8.48097360e+03 -7.49548065e-01]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.28751956, 14.43013115]), array([[0.00957897, 0.00153005],
       [0.00153005, 0.02065944]])), 'StdError': 1041.156458939244}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([13.73383318,  0.30083015]), array([[2.61107285e+10, 1.05199210e+09],
       [1.05199210e+09, 2.54510228e+10]])), 'StdError': 1126.6670884468313}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 1.58228738e+07, -9.35416762e-01]), array([[ 7.04557040e+13, -5.17323995e+05],
       [-5.17323995e+05,  3.83868166e-03]])), 'StdError': 701.4104348153419}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.03752466e+10, -1.81367441e+00]), array([[ 6.41002988e+18, -8.51782858e+07],
       [-8.51782858e+07,  1.13366385e-03]])), 'StdError': 242.69406107882762}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1991.8464649666148}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function exponential
Feature time
Fitting exponential
(array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]]))
exponential fit:  6000.0   0.3
Convergence fit exponential:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.28751956, 14.43013115]), array([[0.00957897, 0.00153005],
       [0.00153005, 0.02065944]])), 'StdError': 1041.156458939244}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([13.73383318,  0.30083015]), array([[2.61107285e+10, 1.05199210e+09],
       [1.05199210e+09, 2.54510228e+10]])), 'StdError': 1126.6670884468313}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 1.58228738e+07, -9.35416762e-01]), array([[ 7.04557040e+13, -5.17323995e+05],
       [-5.17323995e+05,  3.83868166e-03]])), 'StdError': 701.4104348153419}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.03752466e+10, -1.81367441e+00]), array([[ 6.41002988e+18, -8.51782858e+07],
       [-8.51782858e+07,  1.13366385e-03]])), 'StdError': 242.69406107882762}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1991.8464649666148}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 3620.490383912102}}}
Fit and Plot:
Fitting Function maxwellian
Feature speed_kmh
Fitting maxwellian
(array([-1.30508203, 55.44073824]), array([[0.19399686, 0.01838038],
       [0.01838038, 0.85912208]]))
maxwellian fit:  -1.3050820258975697   55.44073824004218
Convergence fit maxwellian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.28751956, 14.43013115]), array([[0.00957897, 0.00153005],
       [0.00153005, 0.02065944]])), 'StdError': 1041.156458939244}, 'speed_kmh': {'fit': (array([-1.30508203, 55.44073824]), array([[0.19399686, 0.01838038],
       [0.01838038, 0.85912208]])), 'StdError': 1052.7458262867926}}, 'gaussian': {'av_speed': {'fit': (array([13.73383318,  0.30083015]), array([[2.61107285e+10, 1.05199210e+09],
       [1.05199210e+09, 2.54510228e+10]])), 'StdError': 1126.6670884468313}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 1.58228738e+07, -9.35416762e-01]), array([[ 7.04557040e+13, -5.17323995e+05],
       [-5.17323995e+05,  3.83868166e-03]])), 'StdError': 701.4104348153419}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.03752466e+10, -1.81367441e+00]), array([[ 6.41002988e+18, -8.51782858e+07],
       [-8.51782858e+07,  1.13366385e-03]])), 'StdError': 242.69406107882762}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1991.8464649666148}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 3620.490383912102}}}
Fitting Function gaussian
Feature speed_kmh
Fitting gaussian
(array([50.3208252 ,  0.30001696]), array([[4.18755379e+12, 2.96883789e+10],
       [2.96883789e+10, 3.76700472e+12]]))
gaussian fit:  50.32082520450212   0.3000169582121384
Convergence fit gaussian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.28751956, 14.43013115]), array([[0.00957897, 0.00153005],
       [0.00153005, 0.02065944]])), 'StdError': 1041.156458939244}, 'speed_kmh': {'fit': (array([-1.30508203, 55.44073824]), array([[0.19399686, 0.01838038],
       [0.01838038, 0.85912208]])), 'StdError': 1052.7458262867926}}, 'gaussian': {'av_speed': {'fit': (array([13.73383318,  0.30083015]), array([[2.61107285e+10, 1.05199210e+09],
       [1.05199210e+09, 2.54510228e+10]])), 'StdError': 1126.6670884468313}, 'speed_kmh': {'fit': (array([50.3208252 ,  0.30001696]), array([[4.18755379e+12, 2.96883789e+10],
       [2.96883789e+10, 3.76700472e+12]])), 'StdError': 1126.6776958983096}}, 'powerlaw': {'lenght': {'fit': (array([ 1.58228738e+07, -9.35416762e-01]), array([[ 7.04557040e+13, -5.17323995e+05],
       [-5.17323995e+05,  3.83868166e-03]])), 'StdError': 701.4104348153419}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.03752466e+10, -1.81367441e+00]), array([[ 6.41002988e+18, -8.51782858e+07],
       [-8.51782858e+07,  1.13366385e-03]])), 'StdError': 242.69406107882762}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1991.8464649666148}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 3620.490383912102}}}
Fitting Function powerlaw
Feature speed_kmh
Fitting Function exponential
Feature speed_kmh
Fit and Plot:
Fitting Function maxwellian
Feature lenght_km
Fitting Function gaussian
Feature lenght_km
Fitting Function powerlaw
Feature lenght_km
Fitting powerlaw
(array([ 2.47189387e+04, -9.35409227e-01]), array([[ 7.89297890e+06, -1.52913935e+02],
       [-1.52913935e+02,  3.83887841e-03]]))
powerlaw fit:  24718.938725870223   -0.9354092271936515
Convergence fit powerlaw:  False
Optimal parameters:  [ 2.47188164e+04 -9.35407191e-01]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.28751956, 14.43013115]), array([[0.00957897, 0.00153005],
       [0.00153005, 0.02065944]])), 'StdError': 1041.156458939244}, 'speed_kmh': {'fit': (array([-1.30508203, 55.44073824]), array([[0.19399686, 0.01838038],
       [0.01838038, 0.85912208]])), 'StdError': 1052.7458262867926}}, 'gaussian': {'av_speed': {'fit': (array([13.73383318,  0.30083015]), array([[2.61107285e+10, 1.05199210e+09],
       [1.05199210e+09, 2.54510228e+10]])), 'StdError': 1126.6670884468313}, 'speed_kmh': {'fit': (array([50.3208252 ,  0.30001696]), array([[4.18755379e+12, 2.96883789e+10],
       [2.96883789e+10, 3.76700472e+12]])), 'StdError': 1126.6776958983096}}, 'powerlaw': {'lenght': {'fit': (array([ 1.58228738e+07, -9.35416762e-01]), array([[ 7.04557040e+13, -5.17323995e+05],
       [-5.17323995e+05,  3.83868166e-03]])), 'StdError': 701.4104348153419}, 'lenght_km': {'fit': (array([ 2.47189387e+04, -9.35409227e-01]), array([[ 7.89297890e+06, -1.52913935e+02],
       [-1.52913935e+02,  3.83887841e-03]])), 'StdError': 701.4104346404465}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.03752466e+10, -1.81367441e+00]), array([[ 6.41002988e+18, -8.51782858e+07],
       [-8.51782858e+07,  1.13366385e-03]])), 'StdError': 242.69406107882762}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1991.8464649666148}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 3620.490383912102}}}
Fitting Function exponential
Feature lenght_km
Fitting exponential
(array([1.12220839e+04, 9.54705854e-02]), array([[6.28775328e+04, 5.21764197e-01],
       [5.21764197e-01, 6.87952365e-06]]))
exponential fit:  11222.083862524258   0.09547058540333686
Convergence fit exponential:  False
Optimal parameters:  [1.12220667e+04 9.54704352e-02]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.28751956, 14.43013115]), array([[0.00957897, 0.00153005],
       [0.00153005, 0.02065944]])), 'StdError': 1041.156458939244}, 'speed_kmh': {'fit': (array([-1.30508203, 55.44073824]), array([[0.19399686, 0.01838038],
       [0.01838038, 0.85912208]])), 'StdError': 1052.7458262867926}}, 'gaussian': {'av_speed': {'fit': (array([13.73383318,  0.30083015]), array([[2.61107285e+10, 1.05199210e+09],
       [1.05199210e+09, 2.54510228e+10]])), 'StdError': 1126.6670884468313}, 'speed_kmh': {'fit': (array([50.3208252 ,  0.30001696]), array([[4.18755379e+12, 2.96883789e+10],
       [2.96883789e+10, 3.76700472e+12]])), 'StdError': 1126.6776958983096}}, 'powerlaw': {'lenght': {'fit': (array([ 1.58228738e+07, -9.35416762e-01]), array([[ 7.04557040e+13, -5.17323995e+05],
       [-5.17323995e+05,  3.83868166e-03]])), 'StdError': 701.4104348153419}, 'lenght_km': {'fit': (array([ 2.47189387e+04, -9.35409227e-01]), array([[ 7.89297890e+06, -1.52913935e+02],
       [-1.52913935e+02,  3.83887841e-03]])), 'StdError': 701.4104346404465}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.03752466e+10, -1.81367441e+00]), array([[ 6.41002988e+18, -8.51782858e+07],
       [-8.51782858e+07,  1.13366385e-03]])), 'StdError': 242.69406107882762}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1991.8464649666148}, 'lenght_km': {'fit': (array([1.12220839e+04, 9.54705854e-02]), array([[6.28775328e+04, 5.21764197e-01],
       [5.21764197e-01, 6.87952365e-06]])), 'StdError': 186.90060776280146}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 3620.490383912102}}}
Fit and Plot:
Fitting Function maxwellian
Feature time_hours
Fitting Function gaussian
Feature time_hours
Fitting Function powerlaw
Feature time_hours
Fitting powerlaw
(array([ 3.68148281e+03, -1.81367635e+00]), array([[1.50780893e+04, 3.95576108e+00],
       [3.95576108e+00, 1.13362249e-03]]))
powerlaw fit:  3681.4828135993384   -1.813676351062865
Convergence fit powerlaw:  False
Optimal parameters:  [ 3.68148367e+03 -1.81367613e+00]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.28751956, 14.43013115]), array([[0.00957897, 0.00153005],
       [0.00153005, 0.02065944]])), 'StdError': 1041.156458939244}, 'speed_kmh': {'fit': (array([-1.30508203, 55.44073824]), array([[0.19399686, 0.01838038],
       [0.01838038, 0.85912208]])), 'StdError': 1052.7458262867926}}, 'gaussian': {'av_speed': {'fit': (array([13.73383318,  0.30083015]), array([[2.61107285e+10, 1.05199210e+09],
       [1.05199210e+09, 2.54510228e+10]])), 'StdError': 1126.6670884468313}, 'speed_kmh': {'fit': (array([50.3208252 ,  0.30001696]), array([[4.18755379e+12, 2.96883789e+10],
       [2.96883789e+10, 3.76700472e+12]])), 'StdError': 1126.6776958983096}}, 'powerlaw': {'lenght': {'fit': (array([ 1.58228738e+07, -9.35416762e-01]), array([[ 7.04557040e+13, -5.17323995e+05],
       [-5.17323995e+05,  3.83868166e-03]])), 'StdError': 701.4104348153419}, 'lenght_km': {'fit': (array([ 2.47189387e+04, -9.35409227e-01]), array([[ 7.89297890e+06, -1.52913935e+02],
       [-1.52913935e+02,  3.83887841e-03]])), 'StdError': 701.4104346404465}, 'time_hours': {'fit': (array([ 3.68148281e+03, -1.81367635e+00]), array([[1.50780893e+04, 3.95576108e+00],
       [3.95576108e+00, 1.13362249e-03]])), 'StdError': 242.69406106972562}, 'time': {'fit': (array([ 1.03752466e+10, -1.81367441e+00]), array([[ 6.41002988e+18, -8.51782858e+07],
       [-8.51782858e+07,  1.13366385e-03]])), 'StdError': 242.69406107882762}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1991.8464649666148}, 'lenght_km': {'fit': (array([1.12220839e+04, 9.54705854e-02]), array([[6.28775328e+04, 5.21764197e-01],
       [5.21764197e-01, 6.87952365e-06]])), 'StdError': 186.90060776280146}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 3620.490383912102}}}
Fitting Function exponential
Feature time_hours
Fitting exponential
(array([6.78376129e+04, 2.94444336e+00]), array([[1.30251668e+06, 4.21557553e+01],
       [4.21557553e+01, 1.53433005e-03]]))
exponential fit:  67837.61288160093   2.9444433590810455
Convergence fit exponential:  False
Optimal parameters:  [6.78368700e+04 2.94442116e+00]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.28751956, 14.43013115]), array([[0.00957897, 0.00153005],
       [0.00153005, 0.02065944]])), 'StdError': 1041.156458939244}, 'speed_kmh': {'fit': (array([-1.30508203, 55.44073824]), array([[0.19399686, 0.01838038],
       [0.01838038, 0.85912208]])), 'StdError': 1052.7458262867926}}, 'gaussian': {'av_speed': {'fit': (array([13.73383318,  0.30083015]), array([[2.61107285e+10, 1.05199210e+09],
       [1.05199210e+09, 2.54510228e+10]])), 'StdError': 1126.6670884468313}, 'speed_kmh': {'fit': (array([50.3208252 ,  0.30001696]), array([[4.18755379e+12, 2.96883789e+10],
       [2.96883789e+10, 3.76700472e+12]])), 'StdError': 1126.6776958983096}}, 'powerlaw': {'lenght': {'fit': (array([ 1.58228738e+07, -9.35416762e-01]), array([[ 7.04557040e+13, -5.17323995e+05],
       [-5.17323995e+05,  3.83868166e-03]])), 'StdError': 701.4104348153419}, 'lenght_km': {'fit': (array([ 2.47189387e+04, -9.35409227e-01]), array([[ 7.89297890e+06, -1.52913935e+02],
       [-1.52913935e+02,  3.83887841e-03]])), 'StdError': 701.4104346404465}, 'time_hours': {'fit': (array([ 3.68148281e+03, -1.81367635e+00]), array([[1.50780893e+04, 3.95576108e+00],
       [3.95576108e+00, 1.13362249e-03]])), 'StdError': 242.69406106972562}, 'time': {'fit': (array([ 1.03752466e+10, -1.81367441e+00]), array([[ 6.41002988e+18, -8.51782858e+07],
       [-8.51782858e+07,  1.13366385e-03]])), 'StdError': 242.69406107882762}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1991.8464649666148}, 'lenght_km': {'fit': (array([1.12220839e+04, 9.54705854e-02]), array([[6.28775328e+04, 5.21764197e-01],
       [5.21764197e-01, 6.87952365e-06]])), 'StdError': 186.90060776280146}, 'time_hours': {'fit': (array([6.78376129e+04, 2.94444336e+00]), array([[1.30251668e+06, 4.21557553e+01],
       [4.21557553e+01, 1.53433005e-03]])), 'StdError': 140.34835501413}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 3620.490383912102}}}
Return Fit Info From Dict:
Fit and Plot:
Fitting Function maxwellian
Feature av_speed
Fitting maxwellian
(array([-0.89424859, 25.08858355]), array([[ 0.01470209, -0.00103414],
       [-0.00103414,  0.0801416 ]]))
maxwellian fit:  -0.8942485931413683   25.0885835477911
Convergence fit maxwellian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.89424859, 25.08858355]), array([[ 0.01470209, -0.00103414],
       [-0.00103414,  0.0801416 ]])), 'StdError': 264.6748871462931}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': None, 'StdError': None}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function gaussian
Feature av_speed
Fitting gaussian
(array([26.93662967,  0.30013954]), array([[4.66083348e+10, 7.34832633e+09],
       [7.34832633e+09, 3.00410455e+10]]))
gaussian fit:  26.93662967332825   0.3001395424031034
Convergence fit gaussian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.89424859, 25.08858355]), array([[ 0.01470209, -0.00103414],
       [-0.00103414,  0.0801416 ]])), 'StdError': 264.6748871462931}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([26.93662967,  0.30013954]), array([[4.66083348e+10, 7.34832633e+09],
       [7.34832633e+09, 3.00410455e+10]])), 'StdError': 338.3938116717564}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function powerlaw
Feature av_speed
Fitting Function exponential
Feature av_speed
Fit and Plot:
Fitting Function maxwellian
Feature lenght
Fitting Function gaussian
Feature lenght
Fitting Function powerlaw
Feature lenght
Fitting powerlaw
(array([ 3.75509902e+05, -6.79305162e-01]), array([[ 3.06741016e+10, -8.72314744e+03],
       [-8.72314744e+03,  2.51904274e-03]]))
powerlaw fit:  375509.90151056007   -0.679305161714911
Convergence fit powerlaw:  False
Optimal parameters:  [ 3.74164970e+05 -6.78897694e-01]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.89424859, 25.08858355]), array([[ 0.01470209, -0.00103414],
       [-0.00103414,  0.0801416 ]])), 'StdError': 264.6748871462931}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([26.93662967,  0.30013954]), array([[4.66083348e+10, 7.34832633e+09],
       [7.34832633e+09, 3.00410455e+10]])), 'StdError': 338.3938116717564}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 3.75509902e+05, -6.79305162e-01]), array([[ 3.06741016e+10, -8.72314744e+03],
       [-8.72314744e+03,  2.51904274e-03]])), 'StdError': 148.59779730627253}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': None, 'StdError': None}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function exponential
Feature lenght
Fitting exponential
(array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]]))
exponential fit:  6000.0   0.3
Convergence fit exponential:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.89424859, 25.08858355]), array([[ 0.01470209, -0.00103414],
       [-0.00103414,  0.0801416 ]])), 'StdError': 264.6748871462931}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([26.93662967,  0.30013954]), array([[4.66083348e+10, 7.34832633e+09],
       [7.34832633e+09, 3.00410455e+10]])), 'StdError': 338.3938116717564}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 3.75509902e+05, -6.79305162e-01]), array([[ 3.06741016e+10, -8.72314744e+03],
       [-8.72314744e+03,  2.51904274e-03]])), 'StdError': 148.59779730627253}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 401.1441885407291}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fit and Plot:
Fitting Function maxwellian
Feature time
Fitting Function gaussian
Feature time
Fitting Function powerlaw
Feature time
Fitting powerlaw
(array([ 1.30540603e+08, -1.45427764e+00]), array([[ 5.02964741e+15, -5.46749117e+06],
       [-5.46749117e+06,  5.96647331e-03]]))
powerlaw fit:  130540602.5759993   -1.4542776379909503
Convergence fit powerlaw:  False
Optimal parameters:  [ 3.02515153e+07 -1.25240771e+00]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.89424859, 25.08858355]), array([[ 0.01470209, -0.00103414],
       [-0.00103414,  0.0801416 ]])), 'StdError': 264.6748871462931}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([26.93662967,  0.30013954]), array([[4.66083348e+10, 7.34832633e+09],
       [7.34832633e+09, 3.00410455e+10]])), 'StdError': 338.3938116717564}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 3.75509902e+05, -6.79305162e-01]), array([[ 3.06741016e+10, -8.72314744e+03],
       [-8.72314744e+03,  2.51904274e-03]])), 'StdError': 148.59779730627253}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.30540603e+08, -1.45427764e+00]), array([[ 5.02964741e+15, -5.46749117e+06],
       [-5.46749117e+06,  5.96647331e-03]])), 'StdError': 229.86392727111735}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 401.1441885407291}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': None, 'StdError': None}}}
Fitting Function exponential
Feature time
Fitting exponential
(array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]]))
exponential fit:  6000.0   0.3
Convergence fit exponential:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.89424859, 25.08858355]), array([[ 0.01470209, -0.00103414],
       [-0.00103414,  0.0801416 ]])), 'StdError': 264.6748871462931}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'gaussian': {'av_speed': {'fit': (array([26.93662967,  0.30013954]), array([[4.66083348e+10, 7.34832633e+09],
       [7.34832633e+09, 3.00410455e+10]])), 'StdError': 338.3938116717564}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 3.75509902e+05, -6.79305162e-01]), array([[ 3.06741016e+10, -8.72314744e+03],
       [-8.72314744e+03,  2.51904274e-03]])), 'StdError': 148.59779730627253}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.30540603e+08, -1.45427764e+00]), array([[ 5.02964741e+15, -5.46749117e+06],
       [-5.46749117e+06,  5.96647331e-03]])), 'StdError': 229.86392727111735}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 401.1441885407291}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1009.7779260807794}}}
Fit and Plot:
Fitting Function maxwellian
Feature speed_kmh
Fitting maxwellian
(array([-3.21928604, 90.31883856]), array([[ 0.19053563, -0.0134021 ],
       [-0.0134021 ,  1.03861612]]))
maxwellian fit:  -3.219286044760948   90.31883856068147
Convergence fit maxwellian:  True
Optimal parameters:  [5.9999375e+03 3.0000000e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.89424859, 25.08858355]), array([[ 0.01470209, -0.00103414],
       [-0.00103414,  0.0801416 ]])), 'StdError': 264.6748871462931}, 'speed_kmh': {'fit': (array([-3.21928604, 90.31883856]), array([[ 0.19053563, -0.0134021 ],
       [-0.0134021 ,  1.03861612]])), 'StdError': 264.6748870105903}}, 'gaussian': {'av_speed': {'fit': (array([26.93662967,  0.30013954]), array([[4.66083348e+10, 7.34832633e+09],
       [7.34832633e+09, 3.00410455e+10]])), 'StdError': 338.3938116717564}, 'speed_kmh': {'fit': None, 'StdError': None}}, 'powerlaw': {'lenght': {'fit': (array([ 3.75509902e+05, -6.79305162e-01]), array([[ 3.06741016e+10, -8.72314744e+03],
       [-8.72314744e+03,  2.51904274e-03]])), 'StdError': 148.59779730627253}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.30540603e+08, -1.45427764e+00]), array([[ 5.02964741e+15, -5.46749117e+06],
       [-5.46749117e+06,  5.96647331e-03]])), 'StdError': 229.86392727111735}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 401.1441885407291}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1009.7779260807794}}}
Fitting Function gaussian
Feature speed_kmh
Fitting gaussian
(array([97.53139299,  0.3       ]), array([[7.95992098e+12, 1.15412013e+12],
       [1.15412013e+12, 4.86691541e+12]]))
gaussian fit:  97.53139298508631   0.3
Convergence fit gaussian:  True
Optimal parameters:  [6.e+03 3.e-01]
Message:  Optimization terminated successfully.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.89424859, 25.08858355]), array([[ 0.01470209, -0.00103414],
       [-0.00103414,  0.0801416 ]])), 'StdError': 264.6748871462931}, 'speed_kmh': {'fit': (array([-3.21928604, 90.31883856]), array([[ 0.19053563, -0.0134021 ],
       [-0.0134021 ,  1.03861612]])), 'StdError': 264.6748870105903}}, 'gaussian': {'av_speed': {'fit': (array([26.93662967,  0.30013954]), array([[4.66083348e+10, 7.34832633e+09],
       [7.34832633e+09, 3.00410455e+10]])), 'StdError': 338.3938116717564}, 'speed_kmh': {'fit': (array([97.53139299,  0.3       ]), array([[7.95992098e+12, 1.15412013e+12],
       [1.15412013e+12, 4.86691541e+12]])), 'StdError': 338.3984015341751}}, 'powerlaw': {'lenght': {'fit': (array([ 3.75509902e+05, -6.79305162e-01]), array([[ 3.06741016e+10, -8.72314744e+03],
       [-8.72314744e+03,  2.51904274e-03]])), 'StdError': 148.59779730627253}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.30540603e+08, -1.45427764e+00]), array([[ 5.02964741e+15, -5.46749117e+06],
       [-5.46749117e+06,  5.96647331e-03]])), 'StdError': 229.86392727111735}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 401.1441885407291}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1009.7779260807794}}}
Fitting Function powerlaw
Feature speed_kmh
Fitting Function exponential
Feature speed_kmh
Fit and Plot:
Fitting Function maxwellian
Feature lenght_km
Fitting Function gaussian
Feature lenght_km
Fitting Function powerlaw
Feature lenght_km
Fitting powerlaw
(array([ 3.44109556e+03, -6.79296016e-01]), array([[ 1.99440166e+05, -2.00893299e+01],
       [-2.00893299e+01,  2.51915815e-03]]))
powerlaw fit:  3441.0955646814655   -0.679296016393823
Convergence fit powerlaw:  False
Optimal parameters:  [ 3.44110053e+03 -6.79296524e-01]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.89424859, 25.08858355]), array([[ 0.01470209, -0.00103414],
       [-0.00103414,  0.0801416 ]])), 'StdError': 264.6748871462931}, 'speed_kmh': {'fit': (array([-3.21928604, 90.31883856]), array([[ 0.19053563, -0.0134021 ],
       [-0.0134021 ,  1.03861612]])), 'StdError': 264.6748870105903}}, 'gaussian': {'av_speed': {'fit': (array([26.93662967,  0.30013954]), array([[4.66083348e+10, 7.34832633e+09],
       [7.34832633e+09, 3.00410455e+10]])), 'StdError': 338.3938116717564}, 'speed_kmh': {'fit': (array([97.53139299,  0.3       ]), array([[7.95992098e+12, 1.15412013e+12],
       [1.15412013e+12, 4.86691541e+12]])), 'StdError': 338.3984015341751}}, 'powerlaw': {'lenght': {'fit': (array([ 3.75509902e+05, -6.79305162e-01]), array([[ 3.06741016e+10, -8.72314744e+03],
       [-8.72314744e+03,  2.51904274e-03]])), 'StdError': 148.59779730627253}, 'lenght_km': {'fit': (array([ 3.44109556e+03, -6.79296016e-01]), array([[ 1.99440166e+05, -2.00893299e+01],
       [-2.00893299e+01,  2.51915815e-03]])), 'StdError': 148.59779724193234}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.30540603e+08, -1.45427764e+00]), array([[ 5.02964741e+15, -5.46749117e+06],
       [-5.46749117e+06,  5.96647331e-03]])), 'StdError': 229.86392727111735}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 401.1441885407291}, 'lenght_km': {'fit': None, 'StdError': None}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1009.7779260807794}}}
Fitting Function exponential
Feature lenght_km
Fitting exponential
(array([1.28029450e+03, 3.19035073e-02]), array([[3.19302934e+03, 7.94770647e-02],
       [7.94770647e-02, 3.56646758e-06]]))
exponential fit:  1280.294504850593   0.03190350733822868
Convergence fit exponential:  False
Optimal parameters:  [1.28029517e+03 3.19035151e-02]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.89424859, 25.08858355]), array([[ 0.01470209, -0.00103414],
       [-0.00103414,  0.0801416 ]])), 'StdError': 264.6748871462931}, 'speed_kmh': {'fit': (array([-3.21928604, 90.31883856]), array([[ 0.19053563, -0.0134021 ],
       [-0.0134021 ,  1.03861612]])), 'StdError': 264.6748870105903}}, 'gaussian': {'av_speed': {'fit': (array([26.93662967,  0.30013954]), array([[4.66083348e+10, 7.34832633e+09],
       [7.34832633e+09, 3.00410455e+10]])), 'StdError': 338.3938116717564}, 'speed_kmh': {'fit': (array([97.53139299,  0.3       ]), array([[7.95992098e+12, 1.15412013e+12],
       [1.15412013e+12, 4.86691541e+12]])), 'StdError': 338.3984015341751}}, 'powerlaw': {'lenght': {'fit': (array([ 3.75509902e+05, -6.79305162e-01]), array([[ 3.06741016e+10, -8.72314744e+03],
       [-8.72314744e+03,  2.51904274e-03]])), 'StdError': 148.59779730627253}, 'lenght_km': {'fit': (array([ 3.44109556e+03, -6.79296016e-01]), array([[ 1.99440166e+05, -2.00893299e+01],
       [-2.00893299e+01,  2.51915815e-03]])), 'StdError': 148.59779724193234}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([ 1.30540603e+08, -1.45427764e+00]), array([[ 5.02964741e+15, -5.46749117e+06],
       [-5.46749117e+06,  5.96647331e-03]])), 'StdError': 229.86392727111735}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 401.1441885407291}, 'lenght_km': {'fit': (array([1.28029450e+03, 3.19035073e-02]), array([[3.19302934e+03, 7.94770647e-02],
       [7.94770647e-02, 3.56646758e-06]])), 'StdError': 80.20292968501884}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1009.7779260807794}}}
Fit and Plot:
Fitting Function maxwellian
Feature time_hours
Fitting Function gaussian
Feature time_hours
Fitting Function powerlaw
Feature time_hours
Fitting powerlaw
(array([878.80332659,  -1.454283  ]), array([[7.18623245e+03, 6.13421119e+00],
       [6.13421119e+00, 5.96622759e-03]]))
powerlaw fit:  878.8033265867504   -1.4542830009513243
Convergence fit powerlaw:  False
Optimal parameters:  [878.80351257  -1.45428284]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.89424859, 25.08858355]), array([[ 0.01470209, -0.00103414],
       [-0.00103414,  0.0801416 ]])), 'StdError': 264.6748871462931}, 'speed_kmh': {'fit': (array([-3.21928604, 90.31883856]), array([[ 0.19053563, -0.0134021 ],
       [-0.0134021 ,  1.03861612]])), 'StdError': 264.6748870105903}}, 'gaussian': {'av_speed': {'fit': (array([26.93662967,  0.30013954]), array([[4.66083348e+10, 7.34832633e+09],
       [7.34832633e+09, 3.00410455e+10]])), 'StdError': 338.3938116717564}, 'speed_kmh': {'fit': (array([97.53139299,  0.3       ]), array([[7.95992098e+12, 1.15412013e+12],
       [1.15412013e+12, 4.86691541e+12]])), 'StdError': 338.3984015341751}}, 'powerlaw': {'lenght': {'fit': (array([ 3.75509902e+05, -6.79305162e-01]), array([[ 3.06741016e+10, -8.72314744e+03],
       [-8.72314744e+03,  2.51904274e-03]])), 'StdError': 148.59779730627253}, 'lenght_km': {'fit': (array([ 3.44109556e+03, -6.79296016e-01]), array([[ 1.99440166e+05, -2.00893299e+01],
       [-2.00893299e+01,  2.51915815e-03]])), 'StdError': 148.59779724193234}, 'time_hours': {'fit': (array([878.80332659,  -1.454283  ]), array([[7.18623245e+03, 6.13421119e+00],
       [6.13421119e+00, 5.96622759e-03]])), 'StdError': 229.86392725606538}, 'time': {'fit': (array([ 1.30540603e+08, -1.45427764e+00]), array([[ 5.02964741e+15, -5.46749117e+06],
       [-5.46749117e+06,  5.96647331e-03]])), 'StdError': 229.86392727111735}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 401.1441885407291}, 'lenght_km': {'fit': (array([1.28029450e+03, 3.19035073e-02]), array([[3.19302934e+03, 7.94770647e-02],
       [7.94770647e-02, 3.56646758e-06]])), 'StdError': 80.20292968501884}, 'time_hours': {'fit': None, 'StdError': None}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1009.7779260807794}}}
Fitting Function exponential
Feature time_hours
Fitting exponential
(array([1.20763397e+04, 2.63001345e+00]), array([[1.15102807e+05, 2.17606388e+01],
       [2.17606388e+01, 5.16803966e-03]]))
exponential fit:  12076.339716166398   2.6300134532414994
Convergence fit exponential:  False
Optimal parameters:  [1.20763384e+04 2.63001321e+00]
Message:  Desired error not necessarily achieved due to precision loss.
InfoFit After Fitting:
 {'maxwellian': {'av_speed': {'fit': (array([-0.89424859, 25.08858355]), array([[ 0.01470209, -0.00103414],
       [-0.00103414,  0.0801416 ]])), 'StdError': 264.6748871462931}, 'speed_kmh': {'fit': (array([-3.21928604, 90.31883856]), array([[ 0.19053563, -0.0134021 ],
       [-0.0134021 ,  1.03861612]])), 'StdError': 264.6748870105903}}, 'gaussian': {'av_speed': {'fit': (array([26.93662967,  0.30013954]), array([[4.66083348e+10, 7.34832633e+09],
       [7.34832633e+09, 3.00410455e+10]])), 'StdError': 338.3938116717564}, 'speed_kmh': {'fit': (array([97.53139299,  0.3       ]), array([[7.95992098e+12, 1.15412013e+12],
       [1.15412013e+12, 4.86691541e+12]])), 'StdError': 338.3984015341751}}, 'powerlaw': {'lenght': {'fit': (array([ 3.75509902e+05, -6.79305162e-01]), array([[ 3.06741016e+10, -8.72314744e+03],
       [-8.72314744e+03,  2.51904274e-03]])), 'StdError': 148.59779730627253}, 'lenght_km': {'fit': (array([ 3.44109556e+03, -6.79296016e-01]), array([[ 1.99440166e+05, -2.00893299e+01],
       [-2.00893299e+01,  2.51915815e-03]])), 'StdError': 148.59779724193234}, 'time_hours': {'fit': (array([878.80332659,  -1.454283  ]), array([[7.18623245e+03, 6.13421119e+00],
       [6.13421119e+00, 5.96622759e-03]])), 'StdError': 229.86392725606538}, 'time': {'fit': (array([ 1.30540603e+08, -1.45427764e+00]), array([[ 5.02964741e+15, -5.46749117e+06],
       [-5.46749117e+06,  5.96647331e-03]])), 'StdError': 229.86392727111735}}, 'exponential': {'lenght': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 401.1441885407291}, 'lenght_km': {'fit': (array([1.28029450e+03, 3.19035073e-02]), array([[3.19302934e+03, 7.94770647e-02],
       [7.94770647e-02, 3.56646758e-06]])), 'StdError': 80.20292968501884}, 'time_hours': {'fit': (array([1.20763397e+04, 2.63001345e+00]), array([[1.15102807e+05, 2.17606388e+01],
       [2.17606388e+01, 5.16803966e-03]])), 'StdError': 88.4222921148968}, 'time': {'fit': (array([6.e+03, 3.e-01]), array([[inf, inf],
       [inf, inf]])), 'StdError': 1009.7779260807794}}}
Class:  0  Feature:  av_speed  Day:  2022-05-12
Initialiaze Mobility and Network for Date: 2022-07-01
Warning: Not Initialized Class2MFD
Reading fcm_centers
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-07-01_2022-07-01_fcm_centers.csv
Reading fcm
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-07-01_2022-07-01_fcm.csv
Reading fcm_new
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-07-01_2022-07-01_fcm_new.csv
1st join Fcm:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Date:  2022-07-01
renamed:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Reading stats
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-07-01_2022-07-01_stats.csv
No stats
Road exception:  
Road exception:  
Road exception:  
Road exception:  
Get increasingly included subnets
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-07-01_2022-07-010_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-07-01_2022-07-011_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-07-01_2022-07-012_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-07-01_2022-07-013_class_subnet.txt
Reading GeoJson
Reading fluxes_sub
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/weights/bologna_mdt_2022-07-01_2022-07-01.fluxes.sub
Class:  0
Fraction of roads considered:  80
Number of Roads SubNetwork:  14370
Class:  1
Fraction of roads considered:  80
Number of Roads SubNetwork:  12304
Class:  2
Fraction of roads considered:  80
Number of Roads SubNetwork:  91
Class:  3
Fraction of roads considered:  80
Number of Roads SubNetwork:  10
Class:  80
Considering the Total Subnetwork indipendent on the Subclass
Computing MFD Variables from Fcm
dict_keys([0, 1, 2, 3])
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Completing GeoJson with Class Info
Comparison of trajectories from Old to New Class 2022-07-01
Comparison of trajectories from Old to New Class 2022-07-01
Reading timed_fluxes
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-07-01_2022-07-01_timed_fluxes.csv
Plotting Daily Incremental Subnetworks in HTML
Save in:  /home/aamad/codice/city-pro/output/bologna_mdt_detailed/plots/2022-07-01/SubnetsIncrementalInclusion_2022-07-01.html
Class:  0  Number of Roads:  99177 Color:  blue
filtered_gdf:     poly_lid  ...                                           geometry
0      32536  ...                                               None
7          7  ...  LINESTRING (11.49332 44.43838, 11.49339 44.438...
11        11  ...  LINESTRING (11.49293 44.43892, 11.49286 44.438...
16        16  ...  LINESTRING (11.69540 44.36112, 11.69543 44.361...
20        20  ...  LINESTRING (11.69479 44.36135, 11.69476 44.361...

[5 rows x 21 columns]
Class:  1  Number of Roads:  12208 Color:  green
filtered_gdf:    poly_lid  ...                                           geometry
1         1  ...  LINESTRING (11.26144 44.48221, 11.26077 44.483...
2         2  ...  LINESTRING (11.69918 44.35028, 11.69906 44.350...
3         3  ...  LINESTRING (11.69889 44.35000, 11.69871 44.349...
4         4  ...  LINESTRING (11.49278 44.43858, 11.49282 44.438...
5         5  ...  LINESTRING (11.49290 44.43845, 11.49292 44.438...

[5 rows x 21 columns]
Class:  2  Number of Roads:  91 Color:  yellow
filtered_gdf:       poly_lid  ...                                           geometry
769        769  ...  LINESTRING (11.26113 44.48510, 11.26096 44.485...
772        772  ...  LINESTRING (11.26113 44.48510, 11.26092 44.485...
773        773  ...  LINESTRING (11.35256 44.52772, 11.35386 44.527...
2370      2370  ...  LINESTRING (11.29370 44.52414, 11.29409 44.524...
2399      2399  ...  LINESTRING (11.36252 44.53410, 11.36237 44.533...

[5 rows x 21 columns]
Class:  3  Number of Roads:  10 Color:  red
filtered_gdf:        poly_lid  ...                                           geometry
8468       8468  ...  LINESTRING (11.20220 44.27812, 11.20197 44.277...
8635       8635  ...  LINESTRING (11.20088 44.27688, 11.20141 44.277...
8638       8638  ...  LINESTRING (11.20245 44.27729, 11.20229 44.277...
48171     48171  ...  LINESTRING (11.21706 44.29418, 11.21396 44.293...
65099     65099  ...  LINESTRING (11.20214 44.27781, 11.20218 44.277...

[5 rows x 21 columns]
Plotting TimePercorrence Distribution
Initialiaze Mobility and Network for Date: 2023-01-01
Warning: Not Initialized Class2MFD
Reading fcm_centers
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-01-01_2023-01-01_fcm_centers.csv
Reading fcm
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-01-01_2023-01-01_fcm.csv
Reading fcm_new
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-01-01_2023-01-01_fcm_new.csv
1st join Fcm:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Date:  2023-01-01
renamed:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Reading stats
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-01-01_2023-01-01_stats.csv
No stats
Road exception:  
Road exception:  
Road exception:  
Road exception:  
Get increasingly included subnets
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-01-01_2023-01-010_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-01-01_2023-01-011_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-01-01_2023-01-012_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-01-01_2023-01-013_class_subnet.txt
Reading GeoJson
Reading fluxes_sub
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/weights/bologna_mdt_2023-01-01_2023-01-01.fluxes.sub
Class:  0
Fraction of roads considered:  80
Number of Roads SubNetwork:  19427
Class:  1
Fraction of roads considered:  80
Number of Roads SubNetwork:  17899
Class:  2
Fraction of roads considered:  80
Number of Roads SubNetwork:  387
Class:  3
Fraction of roads considered:  80
Number of Roads SubNetwork:  15
Class:  4
Fraction of roads considered:  80
Number of Roads SubNetwork:  10
Class:  80
Considering the Total Subnetwork indipendent on the Subclass
Computing MFD Variables from Fcm
dict_keys([0, 1, 2, 3])
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Completing GeoJson with Class Info
Comparison of trajectories from Old to New Class 2023-01-01
Comparison of trajectories from Old to New Class 2023-01-01
Reading timed_fluxes
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-01-01_2023-01-01_timed_fluxes.csv
Plotting Daily Incremental Subnetworks in HTML
Save in:  /home/aamad/codice/city-pro/output/bologna_mdt_detailed/plots/2023-01-01/SubnetsIncrementalInclusion_2023-01-01.html
Class:  0  Number of Roads:  93561 Color:  blue
filtered_gdf:     poly_lid  ...                                           geometry
0      32536  ...                                               None
7          7  ...  LINESTRING (11.49332 44.43838, 11.49339 44.438...
9          9  ...  LINESTRING (11.49360 44.43879, 11.49357 44.438...
11        11  ...  LINESTRING (11.49293 44.43892, 11.49286 44.438...
24        24  ...  LINESTRING (11.70001 44.35922, 11.70000 44.359...

[5 rows x 21 columns]
Class:  1  Number of Roads:  17548 Color:  green
filtered_gdf:    poly_lid  ...                                           geometry
2         2  ...  LINESTRING (11.69918 44.35028, 11.69906 44.350...
3         3  ...  LINESTRING (11.69889 44.35000, 11.69871 44.349...
4         4  ...  LINESTRING (11.49278 44.43858, 11.49282 44.438...
5         5  ...  LINESTRING (11.49290 44.43845, 11.49292 44.438...
6         6  ...  LINESTRING (11.49303 44.43839, 11.49307 44.438...

[5 rows x 21 columns]
Class:  2  Number of Roads:  372 Color:  yellow
filtered_gdf:      poly_lid  ...                                           geometry
1           1  ...  LINESTRING (11.26144 44.48221, 11.26077 44.483...
769       769  ...  LINESTRING (11.26113 44.48510, 11.26096 44.485...
770       770  ...  LINESTRING (11.25613 44.48660, 11.25618 44.486...
771       771  ...  LINESTRING (11.26166 44.48521, 11.26211 44.485...
772       772  ...  LINESTRING (11.26113 44.48510, 11.26092 44.485...

[5 rows x 21 columns]
Class:  3  Number of Roads:  5 Color:  red
filtered_gdf:        poly_lid  ...                                           geometry
3844       3844  ...  LINESTRING (11.26241 44.35707, 11.26768 44.345...
19278     19278  ...  LINESTRING (11.26148 44.36354, 11.26167 44.363...
76715     76715  ...  LINESTRING (11.26148 44.36354, 11.26159 44.363...
78077     78077  ...  LINESTRING (11.26224 44.35801, 11.25987 44.36339)
81249     81249  ...  LINESTRING (11.21522 44.29352, 11.21846 44.294...

[5 rows x 21 columns]
Plotting TimePercorrence Distribution
Initialiaze Mobility and Network for Date: 2022-12-30
Warning: Not Initialized Class2MFD
Reading fcm_centers
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-30_2022-12-30_fcm_centers.csv
Reading fcm
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-30_2022-12-30_fcm.csv
Reading fcm_new
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-30_2022-12-30_fcm_new.csv
1st join Fcm:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Date:  2022-12-30
renamed:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Reading stats
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-30_2022-12-30_stats.csv
No stats
Road exception:  
Road exception:  
Road exception:  
Road exception:  
Get increasingly included subnets
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-30_2022-12-300_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-30_2022-12-301_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-30_2022-12-302_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-30_2022-12-303_class_subnet.txt
Reading GeoJson
Reading fluxes_sub
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/weights/bologna_mdt_2022-12-30_2022-12-30.fluxes.sub
Class:  0
Fraction of roads considered:  80
Number of Roads SubNetwork:  17887
Class:  1
Fraction of roads considered:  80
Number of Roads SubNetwork:  17467
Class:  2
Fraction of roads considered:  80
Number of Roads SubNetwork:  177
Class:  3
Fraction of roads considered:  80
Number of Roads SubNetwork:  15
Class:  4
Fraction of roads considered:  80
Number of Roads SubNetwork:  25
Class:  80
Considering the Total Subnetwork indipendent on the Subclass
Computing MFD Variables from Fcm
dict_keys([0, 1, 2, 3])
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Completing GeoJson with Class Info
Comparison of trajectories from Old to New Class 2022-12-30
Comparison of trajectories from Old to New Class 2022-12-30
Reading timed_fluxes
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-30_2022-12-30_timed_fluxes.csv
Plotting Daily Incremental Subnetworks in HTML
Save in:  /home/aamad/codice/city-pro/output/bologna_mdt_detailed/plots/2022-12-30/SubnetsIncrementalInclusion_2022-12-30.html
Class:  0  Number of Roads:  94024 Color:  blue
filtered_gdf:     poly_lid  ...                                           geometry
0      32536  ...                                               None
34        34  ...  LINESTRING (11.70992 44.35237, 11.70992 44.352...
58        58  ...  LINESTRING (11.60061 44.28633, 11.60027 44.286...
59        59  ...  LINESTRING (11.59297 44.28258, 11.59282 44.282...
60        60  ...  LINESTRING (11.59176 44.28192, 11.59158 44.28182)

[5 rows x 21 columns]
Class:  1  Number of Roads:  17305 Color:  green
filtered_gdf:    poly_lid  ...                                           geometry
2         2  ...  LINESTRING (11.69918 44.35028, 11.69906 44.350...
3         3  ...  LINESTRING (11.69889 44.35000, 11.69871 44.349...
4         4  ...  LINESTRING (11.49278 44.43858, 11.49282 44.438...
5         5  ...  LINESTRING (11.49290 44.43845, 11.49292 44.438...
6         6  ...  LINESTRING (11.49303 44.43839, 11.49307 44.438...

[5 rows x 21 columns]
Class:  2  Number of Roads:  152 Color:  yellow
filtered_gdf:      poly_lid  ...                                           geometry
1           1  ...  LINESTRING (11.26144 44.48221, 11.26077 44.483...
769       769  ...  LINESTRING (11.26113 44.48510, 11.26096 44.485...
770       770  ...  LINESTRING (11.25613 44.48660, 11.25618 44.486...
771       771  ...  LINESTRING (11.26166 44.48521, 11.26211 44.485...
772       772  ...  LINESTRING (11.26113 44.48510, 11.26092 44.485...

[5 rows x 21 columns]
Class:  3  Number of Roads:  5 Color:  red
filtered_gdf:        poly_lid  ...                                           geometry
48171     48171  ...  LINESTRING (11.21706 44.29418, 11.21396 44.293...
80422     80422  ...  LINESTRING (11.19719 44.15566, 11.19696 44.155...
81311     81311  ...  LINESTRING (11.19719 44.15566, 11.19693 44.155...
81641     81641  ...  LINESTRING (11.19632 44.15833, 11.19598 44.157...
86310     86310  ...  LINESTRING (11.19606 44.15708, 11.19642 44.158...

[5 rows x 21 columns]
Plotting TimePercorrence Distribution
Initialiaze Mobility and Network for Date: 2022-01-31
Warning: Not Initialized Class2MFD
Reading fcm_centers
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-01-31_2022-01-31_fcm_centers.csv
Reading fcm
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-01-31_2022-01-31_fcm.csv
Reading fcm_new
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-01-31_2022-01-31_fcm_new.csv
1st join Fcm:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Date:  2022-01-31
renamed:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Reading stats
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-01-31_2022-01-31_stats.csv
No stats
Road exception:  
Road exception:  
Road exception:  
Road exception:  
Get increasingly included subnets
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-01-31_2022-01-310_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-01-31_2022-01-311_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-01-31_2022-01-312_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-01-31_2022-01-313_class_subnet.txt
Reading GeoJson
Reading fluxes_sub
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/weights/bologna_mdt_2022-01-31_2022-01-31.fluxes.sub
Class:  0
Fraction of roads considered:  80
Number of Roads SubNetwork:  19045
Class:  1
Fraction of roads considered:  80
Number of Roads SubNetwork:  19477
Class:  2
Fraction of roads considered:  80
Number of Roads SubNetwork:  2827
Class:  3
Fraction of roads considered:  80
Number of Roads SubNetwork:  10
Class:  80
Considering the Total Subnetwork indipendent on the Subclass
Computing MFD Variables from Fcm
dict_keys([0, 1, 2, 3])
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Completing GeoJson with Class Info
Comparison of trajectories from Old to New Class 2022-01-31
Comparison of trajectories from Old to New Class 2022-01-31
Reading timed_fluxes
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-01-31_2022-01-31_timed_fluxes.csv
Plotting Daily Incremental Subnetworks in HTML
Save in:  /home/aamad/codice/city-pro/output/bologna_mdt_detailed/plots/2022-01-31/SubnetsIncrementalInclusion_2022-01-31.html
Class:  0  Number of Roads:  91827 Color:  blue
filtered_gdf:     poly_lid  ...                                           geometry
0      32536  ...                                               None
16        16  ...  LINESTRING (11.69540 44.36112, 11.69543 44.361...
20        20  ...  LINESTRING (11.69479 44.36135, 11.69476 44.361...
34        34  ...  LINESTRING (11.70992 44.35237, 11.70992 44.352...
58        58  ...  LINESTRING (11.60061 44.28633, 11.60027 44.286...

[5 rows x 21 columns]
Class:  1  Number of Roads:  16832 Color:  green
filtered_gdf:    poly_lid  ...                                           geometry
2         2  ...  LINESTRING (11.69918 44.35028, 11.69906 44.350...
3         3  ...  LINESTRING (11.69889 44.35000, 11.69871 44.349...
7         7  ...  LINESTRING (11.49332 44.43838, 11.49339 44.438...
8         8  ...  LINESTRING (11.49363 44.43869, 11.49362 44.438...
9         9  ...  LINESTRING (11.49360 44.43879, 11.49357 44.438...

[5 rows x 21 columns]
Class:  2  Number of Roads:  2817 Color:  yellow
filtered_gdf:     poly_lid  ...                                           geometry
1          1  ...  LINESTRING (11.26144 44.48221, 11.26077 44.483...
4          4  ...  LINESTRING (11.49278 44.43858, 11.49282 44.438...
5          5  ...  LINESTRING (11.49290 44.43845, 11.49292 44.438...
6          6  ...  LINESTRING (11.49303 44.43839, 11.49307 44.438...
12        12  ...  LINESTRING (11.49332 44.43838, 11.49341 44.438...

[5 rows x 21 columns]
Class:  3  Number of Roads:  10 Color:  red
filtered_gdf:        poly_lid  ...                                           geometry
8468       8468  ...  LINESTRING (11.20220 44.27812, 11.20197 44.277...
8635       8635  ...  LINESTRING (11.20088 44.27688, 11.20141 44.277...
8638       8638  ...  LINESTRING (11.20245 44.27729, 11.20229 44.277...
48171     48171  ...  LINESTRING (11.21706 44.29418, 11.21396 44.293...
65099     65099  ...  LINESTRING (11.20214 44.27781, 11.20218 44.277...

[5 rows x 21 columns]
Plotting TimePercorrence Distribution
Initialiaze Mobility and Network for Date: 2022-11-11
Warning: Not Initialized Class2MFD
Reading fcm_centers
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-11-11_2022-11-11_fcm_centers.csv
Reading fcm
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-11-11_2022-11-11_fcm.csv
Reading fcm_new
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-11-11_2022-11-11_fcm_new.csv
1st join Fcm:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Date:  2022-11-11
renamed:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Reading stats
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-11-11_2022-11-11_stats.csv
No stats
Road exception:  
Road exception:  
Road exception:  
Road exception:  
Get increasingly included subnets
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-11-11_2022-11-110_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-11-11_2022-11-111_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-11-11_2022-11-112_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-11-11_2022-11-113_class_subnet.txt
Reading GeoJson
Reading fluxes_sub
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/weights/bologna_mdt_2022-11-11_2022-11-11.fluxes.sub
Class:  0
Fraction of roads considered:  80
Number of Roads SubNetwork:  16524
Class:  1
Fraction of roads considered:  80
Number of Roads SubNetwork:  14732
Class:  2
Fraction of roads considered:  80
Number of Roads SubNetwork:  65
Class:  3
Fraction of roads considered:  80
Number of Roads SubNetwork:  15
Class:  4
Fraction of roads considered:  80
Number of Roads SubNetwork:  12
Class:  80
Considering the Total Subnetwork indipendent on the Subclass
Computing MFD Variables from Fcm
dict_keys([0, 1, 2, 3])
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Completing GeoJson with Class Info
Comparison of trajectories from Old to New Class 2022-11-11
Comparison of trajectories from Old to New Class 2022-11-11
Reading timed_fluxes
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-11-11_2022-11-11_timed_fluxes.csv
Plotting Daily Incremental Subnetworks in HTML
Save in:  /home/aamad/codice/city-pro/output/bologna_mdt_detailed/plots/2022-11-11/SubnetsIncrementalInclusion_2022-11-11.html
Class:  0  Number of Roads:  96750 Color:  blue
filtered_gdf:     poly_lid  poly_cid  ...  StrClassOrdered_2022-11-11  IntClass_2022-11-11
0      32536         0  ...                   1 slowest                    0
11        11   1000045  ...                   1 slowest                    0
34        34   1000137  ...                   1 slowest                    0
58        58   1000230  ...                   1 slowest                    0
59        59   1000232  ...                   1 slowest                    0

[5 rows x 24 columns]
Class:  1  Number of Roads:  14668 Color:  green
filtered_gdf:    poly_lid  poly_cid  ...  StrClassOrdered_2022-11-11  IntClass_2022-11-11
1         1   1000007  ...                   2 slowest                    1
2         2   1000012  ...                   2 slowest                    1
3         3   1000014  ...                   2 slowest                    1
4         4   1000016  ...                   2 slowest                    1
5         5   1000019  ...                   2 slowest                    1

[5 rows x 24 columns]
Class:  2  Number of Roads:  53 Color:  yellow
filtered_gdf:       poly_lid  poly_cid  ...  StrClassOrdered_2022-11-11  IntClass_2022-11-11
772        772   1004996  ...       middle velocity class                    2
773        773   1004997  ...       middle velocity class                    2
859        859   1005458  ...       middle velocity class                    2
2370      2370   1010232  ...       middle velocity class                    2
2399      2399   1010513  ...       middle velocity class                    2

[5 rows x 24 columns]
Class:  3  Number of Roads:  15 Color:  red
filtered_gdf:        poly_lid  poly_cid  ...  StrClassOrdered_2022-11-11  IntClass_2022-11-11
3844       3844   1017399  ...                  1 quickest                    3
8468       8468   1035283  ...                  1 quickest                    3
8635       8635   1036381  ...                  1 quickest                    3
8638       8638   1036404  ...                  1 quickest                    3
19278     19278   1085151  ...                  1 quickest                    3

[5 rows x 24 columns]
Plotting TimePercorrence Distribution
Initialiaze Mobility and Network for Date: 2022-08-05
Warning: Not Initialized Class2MFD
Reading fcm_centers
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-08-05_2022-08-05_fcm_centers.csv
Reading fcm
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-08-05_2022-08-05_fcm.csv
Reading fcm_new
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-08-05_2022-08-05_fcm_new.csv
1st join Fcm:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Date:  2022-08-05
renamed:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Reading stats
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-08-05_2022-08-05_stats.csv
No stats
Road exception:  
Road exception:  
Road exception:  
Road exception:  
Get increasingly included subnets
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-08-05_2022-08-050_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-08-05_2022-08-051_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-08-05_2022-08-052_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-08-05_2022-08-053_class_subnet.txt
Reading GeoJson
Reading fluxes_sub
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/weights/bologna_mdt_2022-08-05_2022-08-05.fluxes.sub
Class:  0
Fraction of roads considered:  80
Number of Roads SubNetwork:  17016
Class:  1
Fraction of roads considered:  80
Number of Roads SubNetwork:  15890
Class:  2
Fraction of roads considered:  80
Number of Roads SubNetwork:  416
Class:  3
Fraction of roads considered:  80
Number of Roads SubNetwork:  95
Class:  4
Fraction of roads considered:  80
Number of Roads SubNetwork:  29
Class:  80
Considering the Total Subnetwork indipendent on the Subclass
Computing MFD Variables from Fcm
dict_keys([0, 1, 2, 3])
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Completing GeoJson with Class Info
Comparison of trajectories from Old to New Class 2022-08-05
Comparison of trajectories from Old to New Class 2022-08-05
Reading timed_fluxes
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-08-05_2022-08-05_timed_fluxes.csv
Plotting Daily Incremental Subnetworks in HTML
Save in:  /home/aamad/codice/city-pro/output/bologna_mdt_detailed/plots/2022-08-05/SubnetsIncrementalInclusion_2022-08-05.html
Class:  0  Number of Roads:  95567 Color:  blue
filtered_gdf:     poly_lid  poly_cid  ...  StrClassOrdered_2022-08-05  IntClass_2022-08-05
0      32536         0  ...                   1 slowest                    0
11        11   1000045  ...                   1 slowest                    0
16        16   1000068  ...                   1 slowest                    0
20        20   1000082  ...                   1 slowest                    0
34        34   1000137  ...                   1 slowest                    0

[5 rows x 24 columns]
Class:  1  Number of Roads:  15495 Color:  green
filtered_gdf:    poly_lid  poly_cid  ...  StrClassOrdered_2022-08-05  IntClass_2022-08-05
2         2   1000012  ...                   2 slowest                    1
3         3   1000014  ...                   2 slowest                    1
4         4   1000016  ...                   2 slowest                    1
5         5   1000019  ...                   2 slowest                    1
6         6   1000021  ...                   2 slowest                    1

[5 rows x 24 columns]
Class:  2  Number of Roads:  347 Color:  yellow
filtered_gdf:      poly_lid  poly_cid  ...  StrClassOrdered_2022-08-05  IntClass_2022-08-05
198       198   1001552  ...       middle velocity class                    2
205       205   1001588  ...       middle velocity class                    2
771       771   1004994  ...       middle velocity class                    2
798       798   1005211  ...       middle velocity class                    2
799       799   1005247  ...       middle velocity class                    2

[5 rows x 24 columns]
Class:  3  Number of Roads:  77 Color:  red
filtered_gdf:       poly_lid  poly_cid  ...  StrClassOrdered_2022-08-05  IntClass_2022-08-05
1            1   1000007  ...                  1 quickest                    3
770        770   1004954  ...                  1 quickest                    3
773        773   1004997  ...                  1 quickest                    3
2399      2399   1010513  ...                  1 quickest                    3
2401      2401   1010537  ...                  1 quickest                    3

[5 rows x 24 columns]
Plotting TimePercorrence Distribution
Initialiaze Mobility and Network for Date: 2022-12-31
Warning: Not Initialized Class2MFD
Reading fcm_centers
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-31_2022-12-31_fcm_centers.csv
Reading fcm
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-31_2022-12-31_fcm.csv
Reading fcm_new
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-31_2022-12-31_fcm_new.csv
1st join Fcm:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Date:  2022-12-31
renamed:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Reading stats
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-31_2022-12-31_stats.csv
No stats
Road exception:  
Road exception:  
Road exception:  
Road exception:  
Get increasingly included subnets
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-31_2022-12-310_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-31_2022-12-311_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-31_2022-12-312_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-31_2022-12-313_class_subnet.txt
Reading GeoJson
Reading fluxes_sub
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/weights/bologna_mdt_2022-12-31_2022-12-31.fluxes.sub
Class:  0
Fraction of roads considered:  80
Number of Roads SubNetwork:  19524
Class:  1
Fraction of roads considered:  80
Number of Roads SubNetwork:  18902
Class:  2
Fraction of roads considered:  80
Number of Roads SubNetwork:  3082
Class:  3
Fraction of roads considered:  80
Number of Roads SubNetwork:  15
Class:  4
Fraction of roads considered:  80
Number of Roads SubNetwork:  20
Class:  80
Considering the Total Subnetwork indipendent on the Subclass
Computing MFD Variables from Fcm
dict_keys([0, 1, 2, 3])
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Completing GeoJson with Class Info
Comparison of trajectories from Old to New Class 2022-12-31
Comparison of trajectories from Old to New Class 2022-12-31
Reading timed_fluxes
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2022-12-31_2022-12-31_timed_fluxes.csv
Plotting Daily Incremental Subnetworks in HTML
Save in:  /home/aamad/codice/city-pro/output/bologna_mdt_detailed/plots/2022-12-31/SubnetsIncrementalInclusion_2022-12-31.html
Class:  0  Number of Roads:  92417 Color:  blue
filtered_gdf:     poly_lid  poly_cid  ...  StrClassOrdered_2022-12-31  IntClass_2022-12-31
0      32536         0  ...                   1 slowest                    0
62        62   1000248  ...                   1 slowest                    0
63        63   1000260  ...                   1 slowest                    0
64        64   1000271  ...                   1 slowest                    0
65        65   1000282  ...                   1 slowest                    0

[5 rows x 24 columns]
Class:  1  Number of Roads:  16005 Color:  green
filtered_gdf:     poly_lid  poly_cid  ...  StrClassOrdered_2022-12-31  IntClass_2022-12-31
7          7   1000025  ...                   2 slowest                    1
8          8   1000032  ...                   2 slowest                    1
9          9   1000034  ...                   2 slowest                    1
10        10   1000041  ...                   2 slowest                    1
11        11   1000045  ...                   2 slowest                    1

[5 rows x 24 columns]
Class:  2  Number of Roads:  3049 Color:  yellow
filtered_gdf:    poly_lid  poly_cid  ...  StrClassOrdered_2022-12-31  IntClass_2022-12-31
1         1   1000007  ...       middle velocity class                    2
2         2   1000012  ...       middle velocity class                    2
3         3   1000014  ...       middle velocity class                    2
4         4   1000016  ...       middle velocity class                    2
5         5   1000019  ...       middle velocity class                    2

[5 rows x 24 columns]
Class:  3  Number of Roads:  15 Color:  red
filtered_gdf:        poly_lid  poly_cid  ...  StrClassOrdered_2022-12-31  IntClass_2022-12-31
3844       3844   1017399  ...                  1 quickest                    3
8468       8468   1035283  ...                  1 quickest                    3
8635       8635   1036381  ...                  1 quickest                    3
8638       8638   1036404  ...                  1 quickest                    3
19278     19278   1085151  ...                  1 quickest                    3

[5 rows x 24 columns]
Plotting TimePercorrence Distribution
Initialiaze Mobility and Network for Date: 2023-03-18
Warning: Not Initialized Class2MFD
Reading fcm_centers
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-03-18_2023-03-18_fcm_centers.csv
Reading fcm
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-03-18_2023-03-18_fcm.csv
Reading fcm_new
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-03-18_2023-03-18_fcm_new.csv
1st join Fcm:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Date:  2023-03-18
renamed:  ['id_act', 'lenght', 'time', 'av_speed', 'v_max', 'v_min', 'cnt', 'av_accel', 'a_max', 'class', 'p', 'origin_lat', 'origin_lon', 'destination_lat', 'destination_lon', 'start_time', 'end_time', 'speed_kmh', 'lenght_km', 'time_hours', 'class_new']
Reading stats
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-03-18_2023-03-18_stats.csv
No stats
Road exception:  
Road exception:  
Road exception:  
Road exception:  
Get increasingly included subnets
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-03-18_2023-03-180_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-03-18_2023-03-181_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-03-18_2023-03-182_class_subnet.txt
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-03-18_2023-03-183_class_subnet.txt
Reading GeoJson
Reading fluxes_sub
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/weights/bologna_mdt_2023-03-18_2023-03-18.fluxes.sub
Class:  0
Fraction of roads considered:  80
Number of Roads SubNetwork:  19083
Class:  1
Fraction of roads considered:  80
Number of Roads SubNetwork:  18465
Class:  2
Fraction of roads considered:  80
Number of Roads SubNetwork:  2389
Class:  3
Fraction of roads considered:  80
Number of Roads SubNetwork:  22
Class:  4
Fraction of roads considered:  80
Number of Roads SubNetwork:  19
Class:  80
Considering the Total Subnetwork indipendent on the Subclass
Computing MFD Variables from Fcm
dict_keys([0, 1, 2, 3])
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Upload ClassMFD, ClassMFDNew from CSV
Completing GeoJson with Class Info
Comparison of trajectories from Old to New Class 2023-03-18
Comparison of trajectories from Old to New Class 2023-03-18
Reading timed_fluxes
/home/aamad/codice/city-pro/output/bologna_mdt_detailed/bologna_mdt_2023-03-18_2023-03-18_timed_fluxes.csv
Plotting Daily Incremental Subnetworks in HTML
Save in:  /home/aamad/codice/city-pro/output/bologna_mdt_detailed/plots/2023-03-18/SubnetsIncrementalInclusion_2023-03-18.html
Class:  0  Number of Roads:  92947 Color:  blue
filtered_gdf:     poly_lid  ...                                           geometry
0      32536  ...                                               None
7          7  ...  LINESTRING (11.49332 44.43838, 11.49339 44.438...
8          8  ...  LINESTRING (11.49363 44.43869, 11.49362 44.438...
9          9  ...  LINESTRING (11.49360 44.43879, 11.49357 44.438...
11        11  ...  LINESTRING (11.49293 44.43892, 11.49286 44.438...

[5 rows x 21 columns]
Class:  1  Number of Roads:  16166 Color:  green
filtered_gdf:     poly_lid  ...                                           geometry
2          2  ...  LINESTRING (11.69918 44.35028, 11.69906 44.350...
3          3  ...  LINESTRING (11.69889 44.35000, 11.69871 44.349...
10        10  ...  LINESTRING (11.49319 44.43899, 11.49311 44.438...
15        15  ...  LINESTRING (11.69536 44.36106, 11.69540 44.36112)
16        16  ...  LINESTRING (11.69540 44.36112, 11.69543 44.361...

[5 rows x 21 columns]
Class:  2  Number of Roads:  2367 Color:  yellow
filtered_gdf:     poly_lid  ...                                           geometry
1          1  ...  LINESTRING (11.26144 44.48221, 11.26077 44.483...
4          4  ...  LINESTRING (11.49278 44.43858, 11.49282 44.438...
5          5  ...  LINESTRING (11.49290 44.43845, 11.49292 44.438...
6          6  ...  LINESTRING (11.49303 44.43839, 11.49307 44.438...
12        12  ...  LINESTRING (11.49332 44.43838, 11.49341 44.438...

[5 rows x 21 columns]
Class:  3  Number of Roads:  6 Color:  red
filtered_gdf:        poly_lid  ...                                           geometry
10066     10066  ...  LINESTRING (11.24422 44.52462, 11.24388 44.524...
20930     20930  ...  LINESTRING (11.24422 44.52462, 11.24398 44.524...
21427     21427  ...  LINESTRING (11.23993 44.52282, 11.23912 44.522...
26065     26065  ...  LINESTRING (11.18024 44.51488, 11.16935 44.518...
84097     84097  ...  LINESTRING (11.14719 44.52632, 11.14619 44.526...

[5 rows x 21 columns]
Plotting TimePercorrence Distribution
